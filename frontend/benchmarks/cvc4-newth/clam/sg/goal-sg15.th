datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
fun plus (x_0 : Nat) (x_1 : Nat) -> Nat
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= __x0 __y1) (less __x0 __y1))
rw rule0 (plus zero ?n) => ?n
rw rule1 (plus (succ ?n) ?m) => (succ (plus ?n ?m))
rw rule2 (succ (plus ?n ?m)) => (plus (succ ?n) ?m)
rw rule3 (plus ?x (succ ?y)) => (succ (plus ?x ?y))
rw rule4 (succ (plus ?x ?y)) => (plus ?x (succ ?y))
prove (plus ?x (succ ?x))  = (succ (plus ?x ?x))
