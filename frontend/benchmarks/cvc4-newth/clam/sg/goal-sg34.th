datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
fun plus (x_0 : Nat) (x_1 : Nat) -> Nat
fun mult (x_0 : Nat) (x_1 : Nat) -> Nat
fun qmult (x_0 : Nat) (x_1 : Nat) (x_2 : Nat) -> Nat
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= __x0 __y1) (less __x0 __y1))
rw rule0 (plus zero ?n) => ?n
rw rule1 (plus (succ ?n) ?m) => (succ (plus ?n ?m))
rw rule2 (succ (plus ?n ?m)) => (plus (succ ?n) ?m)
rw rule3 (mult zero ?n) => zero
rw rule4 (mult (succ ?n) ?m) => (plus (mult ?n ?m) ?m)
rw rule5 (plus (mult ?n ?m) ?m) => (mult (succ ?n) ?m)
rw rule6 (qmult zero ?n ?m) => ?m
rw rule7 (qmult (succ ?n) ?m ?p) => (qmult ?n ?m (plus ?p ?m))
rw rule8 (qmult ?n ?m (plus ?p ?m)) => (qmult (succ ?n) ?m ?p)
rw rule9 (plus (mult ?x ?y) ?z) => (qmult ?x ?y ?z)
rw rule10 (qmult ?x ?y ?z) => (plus (mult ?x ?y) ?z)
prove (mult ?x ?y)  = (qmult ?x ?y zero)
