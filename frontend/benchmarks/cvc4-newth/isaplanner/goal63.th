datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun last (x_0 : Lst) -> Nat
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (last (cons ?x ?y)) => (ite (= ?y nil) ?x (last ?y))
rw rule1 (ite (= ?y nil) ?x (last ?y)) => (last (cons ?x ?y))
prove if (not (= ?xs nil)) then (last (cons ?x ?xs))  = (last ?xs)
