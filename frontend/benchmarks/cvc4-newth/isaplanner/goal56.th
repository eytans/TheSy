datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun minus (x_0 : Nat) (x_1 : Nat) -> Nat
fun append (x_0 : Lst) (x_1 : Lst) -> Lst
fun len (x_0 : Lst) -> Nat
fun drop (x_0 : Nat) (x_1 : Lst) -> Lst
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (minus zero ?n) => zero
rw rule1 (minus ?n zero) => ?n
rw rule2 (minus (succ ?n) (succ ?m)) => (minus ?n ?m)
rw rule3 (minus ?n ?m) => (minus (succ ?n) (succ ?m))
rw rule4 (append nil ?x) => ?x
rw rule5 (append (cons ?x2 ?y) ?z) => (cons ?x2 (append ?y ?z))
rw rule6 (cons ?x2 (append ?y ?z)) => (append (cons ?x2 ?y) ?z)
rw rule7 (len nil) => zero
rw rule8 zero => (len nil)
rw rule9 (len (cons ?x3 ?y)) => (succ (len ?y))
rw rule10 (drop ?x4 nil) => nil
rw rule11 (drop zero ?x) => ?x
rw rule12 (drop (succ ?x5) (cons ?y6 ?z)) => (drop ?x5 ?z)
prove (drop ?n (append ?xs ?ys))  = (append (drop ?n ?xs) (drop (minus ?n (len ?xs)) ?ys))
