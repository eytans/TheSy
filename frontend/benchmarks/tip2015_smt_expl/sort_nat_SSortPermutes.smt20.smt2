(declare-sort sk 0)
(declare-sort fun1 0)
(declare-sort fun12 0)
(declare-sort fun13 0)
(declare-sort fun14 0)
(declare-sort fun15 0)
(declare-sort fun16 0)
(declare-sort fun17 0)
(declare-sort fun18 0)
(declare-sort sk2 0)
(declare-datatype list2 ((nil2) (cons2 (head2 sk) (tail2 list2))))
(declare-datatype Nat ((zero) (succ (p Nat))))
(declare-datatype list ((nil) (cons (head Nat) (tail list))))
(declare-fun leq (Nat Nat) Bool)
(declare-fun ssort-minimum1 (Nat list) Nat)
(declare-fun ssort (list) list)
(declare-fun elem (sk list2) Bool)
(declare-fun deleteBy (fun1 Nat list) list)
(declare-fun deleteBy2 (fun14 sk list2) list2)
(declare-fun isPermutation (list2 list2) Bool)
(declare-fun lam (Nat) fun12)
(declare-const lam2 fun1)
(declare-fun lam3 (sk) fun16)
(declare-const lam4 fun14)
(declare-fun apply1 (fun1 Nat) fun12)
(declare-fun apply12 (fun12 Nat) Bool)
(declare-fun apply13 (fun13 sk) sk)
(declare-fun apply14 (fun14 sk) fun16)
(declare-fun apply15 (fun15 sk) sk2)
(declare-fun apply16 (fun16 sk) Bool)
(declare-fun apply17 (fun17 sk2) sk)
(declare-fun apply18 (fun18 sk2) sk2)
(assert (isPermutation nil2 nil2))
(assert (= (ssort nil) nil))
(assert (forall ((y Nat)) (leq zero y)))
(assert (forall ((z Nat)) (not (leq (succ z) zero))))
(assert
  (forall ((z Nat) (x2 Nat))
    (= (leq (succ z) (succ x2)) (leq z x2))))
(assert (forall ((x Nat)) (= (ssort-minimum1 x nil) x)))
(assert
  (forall ((x Nat) (y1 Nat) (ys1 list))
    (=> (leq y1 x)
      (= (ssort-minimum1 x (cons y1 ys1)) (ssort-minimum1 y1 ys1)))))
(assert
  (forall ((x Nat) (y1 Nat) (ys1 list))
    (=> (not (leq y1 x))
      (= (ssort-minimum1 x (cons y1 ys1)) (ssort-minimum1 x ys1)))))
(assert (forall ((x sk)) (not (elem x nil2))))
(assert
  (forall ((x sk) (z sk) (xs list2))
    (= (elem x (cons2 z xs)) (or (= z x) (elem x xs)))))
(assert (forall ((x fun1) (y Nat)) (= (deleteBy x y nil) nil)))
(assert
  (forall ((x fun1) (y Nat) (y2 Nat) (ys list))
    (=> (apply12 (apply1 x y) y2) (= (deleteBy x y (cons y2 ys)) ys))))
(assert
  (forall ((x fun1) (y Nat) (y2 Nat) (ys list))
    (=> (not (apply12 (apply1 x y) y2))
      (= (deleteBy x y (cons y2 ys)) (cons y2 (deleteBy x y ys))))))
(assert (forall ((x fun14) (y sk)) (= (deleteBy2 x y nil2) nil2)))
(assert
  (forall ((x fun14) (y sk) (y2 sk) (ys list2))
    (=> (apply16 (apply14 x y) y2)
      (= (deleteBy2 x y (cons2 y2 ys)) ys))))
(assert
  (forall ((x fun14) (y sk) (y2 sk) (ys list2))
    (=> (not (apply16 (apply14 x y) y2))
      (= (deleteBy2 x y (cons2 y2 ys)) (cons2 y2 (deleteBy2 x y ys))))))
(assert
  (forall ((y list2) (x3 sk) (xs list2))
    (= (isPermutation (cons2 x3 xs) y)
      (and (elem x3 y) (isPermutation xs (deleteBy2 lam4 x3 y))))))
(assert
  (forall ((z sk) (x2 list2))
    (not (isPermutation nil2 (cons2 z x2)))))
(assert
  (forall ((y Nat) (ys list) (m Nat))
    (=> (= m (ssort-minimum1 y ys))
      (= (ssort (cons y ys))
        (cons m (ssort (deleteBy lam2 m (cons y ys))))))))
(assert (forall ((x4 sk)) (= (apply14 lam4 x4) (lam3 x4))))
(assert
  (forall ((x4 sk) (x5 sk)) (= (apply16 (lam3 x4) x5) (= x4 x5))))
(assert (forall ((z Nat)) (= (apply1 lam2 z) (lam z))))
(assert
  (forall ((z Nat) (x2 Nat)) (= (apply12 (lam z) x2) (= z x2))))
