(declare-sort sk 0)
(declare-sort fun1 0)
(declare-sort fun12 0)
(declare-sort fun13 0)
(declare-sort fun14 0)
(declare-sort sk2 0)
(declare-datatype list ((nil) (cons (head sk) (tail list))))
(declare-fun map2 (fun1 list) list)
(declare-fun elem (sk list) Bool)
(declare-fun apply1 (fun1 sk) sk)
(declare-fun apply12 (fun12 sk) sk2)
(declare-fun apply13 (fun13 sk2) sk)
(declare-fun apply14 (fun14 sk2) sk2)
(assert (forall ((f fun1)) (= (map2 f nil) nil)))
(assert
  (forall ((f fun1) (y sk) (xs list))
    (= (map2 f (cons y xs)) (cons (apply1 f y) (map2 f xs)))))
(assert (forall ((x sk)) (not (elem x nil))))
(assert
  (forall ((x sk) (z sk) (xs list))
    (= (elem x (cons z xs)) (or (= z x) (elem x xs)))))
