(declare-sort sk 0)
(declare-sort fun1 0)
(declare-sort fun12 0)
(declare-sort fun13 0)
(declare-sort fun14 0)
(declare-sort fun15 0)
(declare-sort fun16 0)
(declare-sort fun17 0)
(declare-sort fun18 0)
(declare-sort sk2 0)
(declare-datatype list2 ((nil2) (cons2 (head2 Int) (tail2 list2))))
(declare-datatype list ((nil) (cons (head sk) (tail list))))
(declare-fun ssort-minimum1 (Int list2) Int)
(declare-fun ssort (list2) list2)
(declare-fun deleteBy (fun12 sk list) list)
(declare-fun deleteBy2 (fun17 Int list2) list2)
(declare-fun count (sk list) Int)
(declare-fun lam (Int) fun18)
(declare-const lam2 fun17)
(declare-fun apply1 (fun1 sk) sk)
(declare-fun apply12 (fun12 sk) fun14)
(declare-fun apply13 (fun13 sk) sk2)
(declare-fun apply14 (fun14 sk) Bool)
(declare-fun apply15 (fun15 sk2) sk)
(declare-fun apply16 (fun16 sk2) sk2)
(declare-fun apply17 (fun17 Int) fun18)
(declare-fun apply18 (fun18 Int) Bool)
(assert (= (ssort nil2) nil2))
(assert (forall ((x Int)) (= (ssort-minimum1 x nil2) x)))
(assert
  (forall ((x Int) (y1 Int) (ys1 list2))
    (=> (not (<= y1 x))
      (= (ssort-minimum1 x (cons2 y1 ys1)) (ssort-minimum1 x ys1)))))
(assert
  (forall ((x Int) (y1 Int) (ys1 list2))
    (=> (<= y1 x)
      (= (ssort-minimum1 x (cons2 y1 ys1)) (ssort-minimum1 y1 ys1)))))
(assert (forall ((x fun12) (y sk)) (= (deleteBy x y nil) nil)))
(assert
  (forall ((x fun12) (y sk) (y2 sk) (ys list))
    (=> (apply14 (apply12 x y) y2)
      (= (deleteBy x y (cons y2 ys)) ys))))
(assert
  (forall ((x fun12) (y sk) (y2 sk) (ys list))
    (=> (not (apply14 (apply12 x y) y2))
      (= (deleteBy x y (cons y2 ys)) (cons y2 (deleteBy x y ys))))))
(assert (forall ((x fun17) (y Int)) (= (deleteBy2 x y nil2) nil2)))
(assert
  (forall ((x fun17) (y Int) (y2 Int) (ys list2))
    (=> (apply18 (apply17 x y) y2)
      (= (deleteBy2 x y (cons2 y2 ys)) ys))))
(assert
  (forall ((x fun17) (y Int) (y2 Int) (ys list2))
    (=> (not (apply18 (apply17 x y) y2))
      (= (deleteBy2 x y (cons2 y2 ys)) (cons2 y2 (deleteBy2 x y ys))))))
(assert
  (forall ((y Int) (ys list2) (m Int))
    (=> (= m (ssort-minimum1 y ys))
      (= (ssort (cons2 y ys))
        (cons2 m (ssort (deleteBy2 lam2 m (cons2 y ys))))))))
(assert (forall ((x sk)) (= (count x nil) 0)))
(assert
  (forall ((x sk) (z sk) (ys list))
    (=> (= x z) (= (count x (cons z ys)) (+ 1 (count x ys))))))
(assert
  (forall ((x sk) (z sk) (ys list))
    (=> (distinct x z) (= (count x (cons z ys)) (count x ys)))))
(assert (forall ((z Int)) (= (apply17 lam2 z) (lam z))))
(assert
  (forall ((z Int) (x2 Int)) (= (apply18 (lam z) x2) (= z x2))))
