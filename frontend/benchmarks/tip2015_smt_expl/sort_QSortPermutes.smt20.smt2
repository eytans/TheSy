(declare-sort sk 0)
(declare-sort fun1 0)
(declare-sort fun12 0)
(declare-sort fun13 0)
(declare-sort fun14 0)
(declare-sort fun15 0)
(declare-sort fun16 0)
(declare-sort fun17 0)
(declare-sort sk2 0)
(declare-datatype list2 ((nil2) (cons2 (head2 Int) (tail2 list2))))
(declare-datatype list ((nil) (cons (head sk) (tail list))))
(declare-fun qsort (list2) list2)
(declare-fun filter (fun14 list) list)
(declare-fun filter2 (fun17 list2) list2)
(declare-fun elem (sk list) Bool)
(declare-fun deleteBy (fun12 sk list) list)
(declare-fun isPermutation (list list) Bool)
(declare-fun ++ (list list) list)
(declare-fun ++2 (list2 list2) list2)
(declare-fun lam (Int) fun17)
(declare-fun lam2 (Int) fun17)
(declare-fun lam3 (sk) fun14)
(declare-const lam4 fun12)
(declare-fun apply1 (fun1 sk) sk)
(declare-fun apply12 (fun12 sk) fun14)
(declare-fun apply13 (fun13 sk) sk2)
(declare-fun apply14 (fun14 sk) Bool)
(declare-fun apply15 (fun15 sk2) sk)
(declare-fun apply16 (fun16 sk2) sk2)
(declare-fun apply17 (fun17 Int) Bool)
(assert (isPermutation nil nil))
(assert (= (qsort nil2) nil2))
(assert (forall ((p fun14)) (= (filter p nil) nil)))
(assert
  (forall ((p fun14) (y sk) (xs list))
    (=> (apply14 p y)
      (= (filter p (cons y xs)) (cons y (filter p xs))))))
(assert
  (forall ((p fun14) (y sk) (xs list))
    (=> (not (apply14 p y)) (= (filter p (cons y xs)) (filter p xs)))))
(assert (forall ((p fun17)) (= (filter2 p nil2) nil2)))
(assert
  (forall ((p fun17) (y Int) (xs list2))
    (=> (apply17 p y)
      (= (filter2 p (cons2 y xs)) (cons2 y (filter2 p xs))))))
(assert
  (forall ((p fun17) (y Int) (xs list2))
    (=> (not (apply17 p y))
      (= (filter2 p (cons2 y xs)) (filter2 p xs)))))
(assert (forall ((x sk)) (not (elem x nil))))
(assert
  (forall ((x sk) (z sk) (xs list))
    (= (elem x (cons z xs)) (or (= z x) (elem x xs)))))
(assert (forall ((x fun12) (y sk)) (= (deleteBy x y nil) nil)))
(assert
  (forall ((x fun12) (y sk) (y2 sk) (ys list))
    (=> (apply14 (apply12 x y) y2)
      (= (deleteBy x y (cons y2 ys)) ys))))
(assert
  (forall ((x fun12) (y sk) (y2 sk) (ys list))
    (=> (not (apply14 (apply12 x y) y2))
      (= (deleteBy x y (cons y2 ys)) (cons y2 (deleteBy x y ys))))))
(assert
  (forall ((y list) (x3 sk) (xs list))
    (= (isPermutation (cons x3 xs) y)
      (and (elem x3 y) (isPermutation xs (deleteBy lam4 x3 y))))))
(assert
  (forall ((z sk) (x2 list)) (not (isPermutation nil (cons z x2)))))
(assert (forall ((y list)) (= (++ nil y) y)))
(assert
  (forall ((y list) (z sk) (xs list))
    (= (++ (cons z xs) y) (cons z (++ xs y)))))
(assert (forall ((y list2)) (= (++2 nil2 y) y)))
(assert
  (forall ((y list2) (z Int) (xs list2))
    (= (++2 (cons2 z xs) y) (cons2 z (++2 xs y)))))
(assert
  (forall ((y Int) (xs list2))
    (= (qsort (cons2 y xs))
      (++2 (qsort (filter2 (lam y) xs))
        (++2 (cons2 y nil2) (qsort (filter2 (lam2 y) xs)))))))
(assert (forall ((x4 sk)) (= (apply12 lam4 x4) (lam3 x4))))
(assert
  (forall ((x4 sk) (x5 sk)) (= (apply14 (lam3 x4) x5) (= x4 x5))))
(assert
  (forall ((y Int) (z Int)) (= (apply17 (lam y) z) (<= z y))))
(assert
  (forall ((y Int) (x2 Int)) (= (apply17 (lam2 y) x2) (> x2 y))))
