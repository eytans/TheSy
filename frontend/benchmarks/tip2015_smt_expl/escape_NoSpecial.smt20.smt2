(declare-sort sk2 0)
(declare-sort sk 0)
(declare-datatype list2 ((nil2) (cons2 (head2 sk) (tail2 list2))))
(declare-datatype Token ((A) (B) (C) (D) (ESC) (P) (Q) (R)))
(declare-datatype list ((nil) (cons (head Token) (tail list))))
(declare-fun isSpecial (Token) Bool)
(declare-fun ok (Token) Bool)
(declare-fun formula (list) Bool)
(declare-fun code (Token) Token)
(declare-fun escape (list) list)
(assert (isSpecial ESC))
(assert (isSpecial P))
(assert (isSpecial Q))
(assert (isSpecial R))
(assert (formula nil))
(assert (= (code ESC) ESC))
(assert (= (code P) A))
(assert (= (code Q) B))
(assert (= (code R) C))
(assert (= (escape nil) nil))
(assert
  (forall ((x Token))
    (=> (distinct x ESC)
      (=> (distinct x P)
        (=> (distinct x Q) (=> (distinct x R) (not (isSpecial x))))))))
(assert
  (forall ((x Token))
    (= (ok x) (or (not (isSpecial x)) (is-ESC x)))))
(assert
  (forall ((y Token) (xs list))
    (= (formula (cons y xs)) (and (ok y) (formula xs)))))
(assert
  (forall ((x Token))
    (=> (distinct x ESC)
      (=> (distinct x P)
        (=> (distinct x Q) (=> (distinct x R) (= (code x) x)))))))
(assert
  (forall ((y Token) (xs list))
    (=> (not (isSpecial y))
      (= (escape (cons y xs)) (cons y (escape xs))))))
(assert
  (forall ((y Token) (xs list))
    (=> (isSpecial y)
      (= (escape (cons y xs)) (cons ESC (cons (code y) (escape xs)))))))
