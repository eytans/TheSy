(declare-sort sk 0)
(declare-sort fun1 0)
(declare-sort fun12 0)
(declare-sort fun13 0)
(declare-sort fun14 0)
(declare-sort fun15 0)
(declare-sort fun16 0)
(declare-sort sk2 0)
(declare-datatype list3 ((nil2) (cons2 (head2 sk) (tail2 list3))))
(declare-datatype list2 ((nil3) (cons3 (head3 Int) (tail3 list2))))
(declare-datatype list ((nil) (cons (head list2) (tail list))))
(declare-fun risers (list2) list)
(declare-fun lmerge (list2 list2) list2)
(declare-fun pairwise (list) list)
(declare-fun mergingbu2 (list) list2)
(declare-fun msortbu2 (list2) list2)
(declare-fun elem (sk list3) Bool)
(declare-fun deleteBy (fun12 sk list3) list3)
(declare-fun isPermutation (list3 list3) Bool)
(declare-fun lam (sk) fun14)
(declare-const lam2 fun12)
(declare-fun apply1 (fun1 sk) sk)
(declare-fun apply12 (fun12 sk) fun14)
(declare-fun apply13 (fun13 sk) sk2)
(declare-fun apply14 (fun14 sk) Bool)
(declare-fun apply15 (fun15 sk2) sk)
(declare-fun apply16 (fun16 sk2) sk2)
(assert (isPermutation nil2 nil2))
(assert (= (risers nil3) nil))
(assert (= (pairwise nil) nil))
(assert (= (mergingbu2 nil) nil3))
(assert
  (forall ((y Int))
    (= (risers (cons3 y nil3)) (cons (cons3 y nil3) nil))))
(assert
  (forall ((y Int) (y2 Int) (xs list2))
    (=> (not (<= y y2))
      (= (risers (cons3 y (cons3 y2 xs)))
        (cons (cons3 y nil3) (risers (cons3 y2 xs)))))))
(assert
  (forall ((y Int) (y2 Int) (xs list2))
    (=> (<= y y2)
      (=> (= (risers (cons3 y2 xs)) nil)
        (= (risers (cons3 y (cons3 y2 xs))) nil)))))
(assert
  (forall ((y Int) (y2 Int) (xs list2) (ys list2) (yss list))
    (=> (<= y y2)
      (=> (= (risers (cons3 y2 xs)) (cons ys yss))
        (= (risers (cons3 y (cons3 y2 xs))) (cons (cons3 y ys) yss))))))
(assert (forall ((y list2)) (= (lmerge nil3 y) y)))
(assert
  (forall ((z Int) (x2 list2))
    (= (lmerge (cons3 z x2) nil3) (cons3 z x2))))
(assert
  (forall ((z Int) (x2 list2) (x3 Int) (x4 list2))
    (=> (not (<= z x3))
      (= (lmerge (cons3 z x2) (cons3 x3 x4))
        (cons3 x3 (lmerge (cons3 z x2) x4))))))
(assert
  (forall ((z Int) (x2 list2) (x3 Int) (x4 list2))
    (=> (<= z x3)
      (= (lmerge (cons3 z x2) (cons3 x3 x4))
        (cons3 z (lmerge x2 (cons3 x3 x4)))))))
(assert
  (forall ((xs list2)) (= (pairwise (cons xs nil)) (cons xs nil))))
(assert
  (forall ((xs list2) (ys list2) (xss list))
    (= (pairwise (cons xs (cons ys xss)))
      (cons (lmerge xs ys) (pairwise xss)))))
(assert (forall ((xs list2)) (= (mergingbu2 (cons xs nil)) xs)))
(assert
  (forall ((xs list2) (z list2) (x2 list))
    (= (mergingbu2 (cons xs (cons z x2)))
      (mergingbu2 (pairwise (cons xs (cons z x2)))))))
(assert
  (forall ((x list2)) (= (msortbu2 x) (mergingbu2 (risers x)))))
(assert (forall ((x sk)) (not (elem x nil2))))
(assert
  (forall ((x sk) (z sk) (xs list3))
    (= (elem x (cons2 z xs)) (or (= z x) (elem x xs)))))
(assert (forall ((x fun12) (y sk)) (= (deleteBy x y nil2) nil2)))
(assert
  (forall ((x fun12) (y sk) (y2 sk) (ys list3))
    (=> (apply14 (apply12 x y) y2)
      (= (deleteBy x y (cons2 y2 ys)) ys))))
(assert
  (forall ((x fun12) (y sk) (y2 sk) (ys list3))
    (=> (not (apply14 (apply12 x y) y2))
      (= (deleteBy x y (cons2 y2 ys)) (cons2 y2 (deleteBy x y ys))))))
(assert
  (forall ((y list3) (x3 sk) (xs list3))
    (= (isPermutation (cons2 x3 xs) y)
      (and (elem x3 y) (isPermutation xs (deleteBy lam2 x3 y))))))
(assert
  (forall ((z sk) (x2 list3))
    (not (isPermutation nil2 (cons2 z x2)))))
(assert (forall ((x4 sk)) (= (apply12 lam2 x4) (lam x4))))
(assert
  (forall ((x4 sk) (x5 sk)) (= (apply14 (lam x4) x5) (= x4 x5))))
