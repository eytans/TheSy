datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun drop (x_0 : Nat) (x_1 : Lst) -> Lst
fun mem (x_0 : Nat) (x_1 : Lst) -> Bool
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (drop ?x nil) => nil
rw rule1 (drop zero ?x2) => ?x2
rw rule2 (drop (succ ?x) (cons ?y ?z)) => (drop ?x ?z)
rw rule3 (mem ?x nil) => false
rw rule4 (mem ?x (cons ?y ?z)) => (or (= ?x ?y) (mem ?x ?z))
rw rule5 (or (= ?x ?y) (mem ?x ?z)) => (mem ?x (cons ?y ?z))
prove if (mem (?x : Nat) (drop (?y : Nat) (?z : Lst))) then (mem (?x : Nat) (?z : Lst)) 
