datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun append (x_0 : Lst) (x_1 : Lst) -> Lst
fun mem (x_0 : Nat) (x_1 : Lst) -> Bool
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (append nil ?x) => ?x
rw rule1 (append (cons ?x2 ?y) ?z) => (cons ?x2 (append ?y ?z))
rw rule2 (cons ?x2 (append ?y ?z)) => (append (cons ?x2 ?y) ?z)
rw rule3 (mem ?x3 nil) => false
rw rule4 (mem ?x4 (cons ?y5 ?z)) => (or (= ?x4 ?y5) (mem ?x4 ?z))
rw rule5 (or (= ?x4 ?y5) (mem ?x4 ?z)) => (mem ?x4 (cons ?y5 ?z))
prove if (or (mem (?x6 : Nat) (?y : Lst)) (mem (?x6 : Nat) (?z : Lst))) then (mem (?x6 : Nat) (append (?y : Lst) (?z : Lst))) 
