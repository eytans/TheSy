(datatype Nat () ((succ Nat Nat) (zero Nat)))
(declare-fun plus (Nat Nat) Nat)
(declare-fun mult (Nat Nat) Nat)
(declare-fun tri (Nat) Nat)
(declare-fun cubes (Nat) Nat)
(=> rule0 (plus zero ?n) ?n)
(=> rule1 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule2 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(=> rule3 (mult zero ?n) zero)
(=> rule4 (mult (succ ?n) ?m) (plus (mult ?n ?m) ?m))
(=> rule5 (plus (mult ?n ?m) ?m) (mult (succ ?n) ?m))
(=> rule6 (tri zero) zero)
(=> rule7 zero (tri zero))
(=> rule8 (tri (succ ?n)) (plus (tri ?n) (succ ?n)))
(=> rule9 (plus (tri ?n) (succ ?n)) (tri (succ ?n)))
(=> rule10 (cubes zero) zero)
(=> rule11 zero (cubes zero))
(=> rule12 (cubes (succ ?n)) (plus (cubes ?n) (mult (succ ?n) (mult (succ ?n) (succ ?n)))))
(=> rule13 (plus (cubes ?n) (mult (succ ?n) (mult (succ ?n) (succ ?n)))) (cubes (succ ?n)))
(=> rule14 (plus ?n ?m) (plus ?m ?n))
(=> rule15 (plus ?m ?n) (plus ?n ?m))
(=> rule16 (plus ?x (plus ?y ?z)) (plus (plus ?y ?x) ?z))
(=> rule17 (plus (plus ?y ?x) ?z) (plus ?x (plus ?y ?z)))
(=> rule18 (mult ?n ?m) (mult ?m ?n))
(=> rule19 (mult ?m ?n) (mult ?n ?m))
(=> rule20 (plus (mult ?x ?y) (mult ?x ?z)) (mult ?x (plus ?y ?z)))
(=> rule21 (mult ?x (plus ?y ?z)) (plus (mult ?x ?y) (mult ?x ?z)))
(=> rule22 (plus (tri ?x) (tri ?x)) (plus ?x (mult ?x ?x)))
(=> rule23 (plus ?x (mult ?x ?x)) (plus (tri ?x) (tri ?x)))
(prove (forall ((x Nat)) (= (mult (tri x) (tri x)) (cubes x))))
