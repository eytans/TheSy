Collecting statistics
(leq ?__x0 ?__y1) => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
(or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) => (leq ?__x0 ?__y1)
(plus zero ?n) => ?n
(plus (succ ?n) ?m) => (succ (plus ?n ?m))
(succ (plus ?n ?m)) => (plus (succ ?n) ?m)
(append nil ?x) => ?x
(append (cons ?x2 ?y) ?z) => (cons ?x2 (append ?y ?z))
(cons ?x2 (append ?y ?z)) => (append (cons ?x2 ?y) ?z)
(len nil) => zero
zero => (len nil)
(len (cons ?x3 ?y)) => (succ (len ?y))
(rev nil) => nil
nil => (rev nil)
(rev (cons ?x4 ?y)) => (append (rev ?y) (cons ?x4 nil))
(append (rev ?y) (cons ?x4 nil)) => (rev (cons ?x4 ?y))
(qreva nil ?x) => ?x
(qreva (cons ?z5 ?x) ?y) => (qreva ?x (cons ?z5 ?y))
(qreva ?x (cons ?z5 ?y)) => (qreva (cons ?z5 ?x) ?y)
(plus ?x6 (succ ?y7)) => (succ (plus ?x6 ?y7))
(succ (plus ?x6 ?y7)) => (plus ?x6 (succ ?y7))
(append ?autovar3 (cons ?autovar2 nil)) => (potential_split ?autovar3 (cons (param_Lst_0 ?autovar3) (param_Lst_1 ?autovar3)) nil) if Cond(var: ?autovar3, pat: (cons ?param_0 ?param_1)) Cond(var: ?autovar3, pat: nil)
 ex is: zero
 ex is: (succ zero)
 ex is: (succ (succ zero))
 ex is: nil
 ex is: (cons autovar_Nat_0 nil)
 ex is: (cons autovar_Nat_1 (cons autovar_Nat_0 nil))
Running TheSy on datatypes: Lst Nat dict: plus append len rev qreva leq succ zero cons nil
proved: (len (qreva ?ts_ph_Lst_0 ?ts_ph_Lst_2)) => (plus (len ?ts_ph_Lst_0) (len ?ts_ph_Lst_2))
proved: (plus (len ?ts_ph_Lst_0) (len ?ts_ph_Lst_2)) => (len (qreva ?ts_ph_Lst_0 ?ts_ph_Lst_2))
01:11:27 [0m[33m[WARN] [0mFound all lemmas
done in 1
