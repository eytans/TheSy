datatype Lst () := (nil : (ret : Lst)) (cons : (x: Nat) -> (xs: Lst) -> (ret: Lst))

fun append (l1: Lst) (l2: Lst) -> Lst
rw app_base (append nil ?x) => ?x
rw app_ind1 (append (cons ?x ?y) ?z) => (cons ?x (append ?y ?z))
rw app_ind2 (cons ?x (append ?y ?z)) => (append (cons ?x ?y) ?z)

fun snoc l: Lst x: Nat -> Lst
rw snoc_base (snoc nil ?x) => (cons ?x nil)
rw snoc_ind (snoc (cons ?x ?xs) ?y) <=> (cons ?x (snoc ?xs ?y))

fun rev l:Lst -> Lst
rw rev_base (rev nil) => nil
rw rev_ind (rev (cons ?x ?y)) <=> (snoc (rev ?y) ?x)