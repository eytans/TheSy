datatype boolean () := (T: ret: boolean) (F: ret: boolean)

fun And a: boolean b: boolean -> boolean => (ite (#=# ?a T) ?b false)
fun Or a: boolean b: boolean -> boolean => (ite (#=# ?a T) true ?b)
fun Not a: boolean -> boolean => (ite (#=# ?a T) false true)

prove (And v: {ph( 0 ), boolean} T) = v: {ph( 0 ), boolean}
prove (And v: {ph( 0 ), boolean} F) = F
prove (Or v: {ph( 0 ), boolean} T) = T
prove (Or v: {ph( 0 ), boolean} F) = v: {ph( 0 ), boolean}
