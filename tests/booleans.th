datatype boolean () := (T: ret: boolean) (F: ret: boolean)

fun And a: boolean b: boolean -> boolean => (ite (Eq ?a T) ?b F)
fun Or a: boolean b: boolean -> boolean => (ite (Eq ?a T) T ?b)
fun Not a: boolean -> boolean => (ite (Eq ?a T) F T)

prove (And v: {ph( 0 ), boolean} T) = v: {ph( 0 ), boolean}
;prove (And v: {ph( 0 ), boolean} F) = F
;prove (Or v: {ph( 0 ), boolean} T) = T
;prove (Or v: {ph( 0 ), boolean} F) = v: {ph( 0 ), boolean}
