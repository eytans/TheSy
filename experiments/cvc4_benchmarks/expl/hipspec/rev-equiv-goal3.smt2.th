(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun rev (Lst) Lst)
(declare-fun qreva (Lst Lst) Lst)
(declare-fun qrev (Lst) Lst)
(=> rule0 (append nil ?x) ?x)
(=> rule1 (append (cons ?x0 ?y) ?z) (cons ?x0 (append ?y ?z)))
(=> rule2 (cons ?x0 (append ?y ?z)) (append (cons ?x0 ?y) ?z))
(=> rule3 (rev nil) nil)
(=> rule4 nil (rev nil))
(=> rule5 (rev (cons ?x1 ?y)) (append (rev ?y) (cons ?x1 nil)))
(=> rule6 (append (rev ?y) (cons ?x1 nil)) (rev (cons ?x1 ?y)))
(=> rule7 (qreva nil ?x) ?x)
(=> rule8 (qreva (cons ?z2 ?x) ?y) (qreva ?x (cons ?z2 ?y)))
(=> rule9 (qreva ?x (cons ?z2 ?y)) (qreva (cons ?z2 ?x) ?y))
(=> rule10 (qrev ?x) (qreva ?x nil))
(=> rule11 (qreva ?x nil) (qrev ?x))
(prove (forall ((y Lst)(x Lst)) (= (append (rev x) (rev y)) (rev (append y x)))))
