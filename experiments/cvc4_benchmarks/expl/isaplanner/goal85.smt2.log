12:05:00 [WARN] Collecting statistics
12:05:00 [WARN]  ex is: zero
12:05:00 [WARN]  ex is: (succ zero)
12:05:00 [WARN]  ex is: (succ (succ zero))
12:05:00 [WARN]  ex is: nil
12:05:00 [WARN]  ex is: (cons autovar_Nat_0 nil)
12:05:00 [WARN]  ex is: (cons autovar_Nat_1 (cons autovar_Nat_0 nil))
12:05:00 [WARN]  ex is: (mkpair autovar_Nat_0 autovar_Nat_1)
12:05:00 [WARN]  ex is: znil
12:05:00 [WARN]  ex is: (zcons autovar_Pair_0 znil)
12:05:00 [WARN]  ex is: (zcons autovar_Pair_1 (zcons autovar_Pair_0 znil))
12:05:00 [WARN] Proof mode: false
12:05:00 [WARN]  ex is: zero
12:05:00 [WARN]  ex is: (succ zero)
12:05:00 [WARN]  ex is: (succ (succ zero))
12:05:00 [WARN]  ex is: nil
12:05:00 [WARN]  ex is: (cons autovar_Nat_0 nil)
12:05:00 [WARN]  ex is: (cons autovar_Nat_1 (cons autovar_Nat_0 nil))
12:05:00 [WARN]  ex is: (mkpair autovar_Nat_0 autovar_Nat_1)
12:05:00 [WARN]  ex is: znil
12:05:00 [WARN]  ex is: (zcons autovar_Pair_0 znil)
12:05:00 [WARN]  ex is: (zcons autovar_Pair_1 (zcons autovar_Pair_0 znil))
12:05:00 [WARN] Proof mode: false
12:05:04 [WARN] proved: (zappend ?ts_ph_ZLst_0 znil) => ?ts_ph_ZLst_0
12:05:04 [WARN] proved: (append ?ts_ph_Lst_0 nil) => ?ts_ph_Lst_0
12:05:04 [WARN] proved: (leq zero ?ts_ph_Nat_0) => true
12:09:19 [WARN] generalized case_split proof as: (zappend ?ts_ph_ZLst_0 (zappend ?ts_ph_ZLst_1 ?ts_ph_ZLst_2)) -- (zappend (zappend ?ts_ph_ZLst_0 ?ts_ph_ZLst_1) ?ts_ph_ZLst_2)
12:09:19 [WARN] proved: (zappend ?ts_ph_ZLst_0 (zappend ?ts_ph_ZLst_1 ?ts_ph_ZLst_2)) => (zappend (zappend ?ts_ph_ZLst_0 ?ts_ph_ZLst_1) ?ts_ph_ZLst_2)
12:09:19 [WARN] proved: (zappend (zappend ?ts_ph_ZLst_0 ?ts_ph_ZLst_1) ?ts_ph_ZLst_2) => (zappend ?ts_ph_ZLst_0 (zappend ?ts_ph_ZLst_1 ?ts_ph_ZLst_2))
12:09:19 [WARN] generalized case_split proof as: (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)) -- (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2)
12:09:19 [WARN] proved: (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)) => (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2)
12:09:19 [WARN] proved: (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2) => (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2))
12:09:19 [WARN] proved: (drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1)) => (drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1))
12:09:19 [WARN] proved: (drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1)) => (drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1))
12:09:19 [WARN] proved: (zip (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_0) => (zip ?ts_ph_Lst_0 ?ts_ph_Lst_0)
12:09:19 [WARN] proved: (zip ?ts_ph_Lst_0 (append ?ts_ph_Lst_0 ?ts_ph_Lst_1)) => (zip (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_0)
12:09:19 [WARN] proved: (zip (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_0) => (zip ?ts_ph_Lst_0 (append ?ts_ph_Lst_0 ?ts_ph_Lst_1))
12:09:19 [WARN] proved: (leq (succ zero) (succ ?ts_ph_Nat_0)) => true
12:09:19 [WARN] proved: (take (succ zero) (append ?ts_ph_Lst_0 ?ts_ph_Lst_0)) => (take (succ zero) ?ts_ph_Lst_0)
12:09:19 [WARN] proved: (take (succ zero) ?ts_ph_Lst_0) => (take (succ zero) (append ?ts_ph_Lst_0 ?ts_ph_Lst_0))
12:09:19 [WARN] generalized case_split proof as: (zappend (zip ?ts_ph_Lst_0 ?ts_ph_Lst_0) (zip ?ts_ph_Lst_1 ?ts_ph_Lst_2)) -- (zip (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) (append ?ts_ph_Lst_0 ?ts_ph_Lst_2))
12:09:19 [WARN] proved: (zappend (zip ?ts_ph_Lst_0 ?ts_ph_Lst_0) (zip ?ts_ph_Lst_1 ?ts_ph_Lst_2)) => (zip (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) (append ?ts_ph_Lst_0 ?ts_ph_Lst_2))
12:09:19 [WARN] proved: (zip (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) (append ?ts_ph_Lst_0 ?ts_ph_Lst_2)) => (zappend (zip ?ts_ph_Lst_0 ?ts_ph_Lst_0) (zip ?ts_ph_Lst_1 ?ts_ph_Lst_2))
12:09:19 [WARN] proved: (zip ?ts_ph_Lst_0 (cons ?ts_ph_Nat_1 nil)) => (zip (append ?ts_ph_Lst_0 ?ts_ph_Lst_0) (cons ?ts_ph_Nat_1 nil))
12:09:19 [WARN] proved: (zip (append ?ts_ph_Lst_0 ?ts_ph_Lst_0) (cons ?ts_ph_Nat_1 nil)) => (zip ?ts_ph_Lst_0 (cons ?ts_ph_Nat_1 nil))
12:09:19 [WARN] proved: (zip (cons ?ts_ph_Nat_1 nil) (append ?ts_ph_Lst_0 ?ts_ph_Lst_0)) => (zip (cons ?ts_ph_Nat_1 nil) ?ts_ph_Lst_0)
12:09:19 [WARN] proved: (zip (cons ?ts_ph_Nat_1 nil) ?ts_ph_Lst_0) => (zip (cons ?ts_ph_Nat_1 nil) (append ?ts_ph_Lst_0 ?ts_ph_Lst_0))
12:09:20 [WARN] proved: (take (len ?ts_ph_Lst_0) ?ts_ph_Lst_0) => ?ts_ph_Lst_0
12:09:24 [WARN] proved: (drop (len ?ts_ph_Lst_0) ?ts_ph_Lst_0) => nil
12:09:28 [WARN] proved: (drop ?ts_ph_Nat_1 (take ?ts_ph_Nat_1 ?ts_ph_Lst_0)) => nil
12:09:36 [WARN] proved: (take ?ts_ph_Nat_1 ?ts_ph_Lst_0) => (take ?ts_ph_Nat_1 (take ?ts_ph_Nat_1 ?ts_ph_Lst_0))
12:09:36 [WARN] proved: (take ?ts_ph_Nat_1 (take ?ts_ph_Nat_1 ?ts_ph_Lst_0)) => (take ?ts_ph_Nat_1 ?ts_ph_Lst_0)
12:09:47 [WARN] proved: (zip (take ?ts_ph_Nat_1 ?ts_ph_Lst_0) ?ts_ph_Lst_0) => (zip ?ts_ph_Lst_0 (take ?ts_ph_Nat_1 ?ts_ph_Lst_0))
12:09:47 [WARN] proved: (zip ?ts_ph_Lst_0 (take ?ts_ph_Nat_1 ?ts_ph_Lst_0)) => (zip (take ?ts_ph_Nat_1 ?ts_ph_Lst_0) ?ts_ph_Lst_0)
12:09:59 [WARN] proved: (drop (succ ?ts_ph_Nat_1) (take ?ts_ph_Nat_1 ?ts_ph_Lst_0)) => nil
12:10:24 [WARN] proved: (take ?ts_ph_Nat_1 ?ts_ph_Lst_0) => (take (succ ?ts_ph_Nat_1) (take ?ts_ph_Nat_1 ?ts_ph_Lst_0))
12:10:24 [WARN] proved: (take (succ ?ts_ph_Nat_1) (take ?ts_ph_Nat_1 ?ts_ph_Lst_0)) => (take ?ts_ph_Nat_1 ?ts_ph_Lst_0)
12:23:01 [WARN] proved: (drop (len ?ts_ph_Lst_0) (take ?ts_ph_Nat_1 ?ts_ph_Lst_0)) => nil
