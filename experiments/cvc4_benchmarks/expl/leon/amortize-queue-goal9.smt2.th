(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(datatype Queue () ((queue Lst Lst Queue)))
(declare-fun less (Nat Nat) Bool)
(declare-fun plus (Nat Nat) Nat)
(declare-fun append (Lst Lst) Lst)
(declare-fun len (Lst) Nat)
(declare-fun butlast (Lst) Lst)
(declare-fun qreva (Lst Lst) Lst)
(declare-fun qrev (Lst) Lst)
(declare-fun queue-to-lst (Queue) Lst)
(declare-fun qlen (Queue) Nat)
(declare-fun isAmortized (Queue) Bool)
(declare-fun isEmpty (Queue) Bool)
(declare-fun amortizeQueue (Lst Lst) Queue)
(declare-fun enqueue (Queue Nat) Queue)
(declare-fun qpop (Queue) Queue)
(<=> rule0 (less zero zero) false)
(=> rule1 (less zero (succ ?x)) true)
(=> rule2 (less (succ ?x) (succ ?y)) (less ?x ?y))
(=> rule3 (less ?x ?y) (less (succ ?x) (succ ?y)))
(declare-fun leq (Nat Nat) Bool)
(=> rule4 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule5 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule6 (plus zero ?n) ?n)
(=> rule7 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule8 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(=> rule9 (append nil ?x2) ?x2)
(=> rule10 (append (cons ?x ?y3) ?z) (cons ?x (append ?y3 ?z)))
(=> rule11 (cons ?x (append ?y3 ?z)) (append (cons ?x ?y3) ?z))
(=> rule12 (len nil) zero)
(=> rule13 zero (len nil))
(=> rule14 (len (cons ?x ?y4)) (succ (len ?y4)))
(=> rule15 (butlast nil) nil)
(=> rule16 nil (butlast nil))
(=> rule17 (butlast (cons ?x ?y5)) (ite (= ?y5 nil) nil (cons ?x (butlast ?y5))))
(=> rule18 (ite (= ?y5 nil) nil (cons ?x (butlast ?y5))) (butlast (cons ?x ?y5)))
(=> rule19 (qreva nil ?x6) ?x6)
(=> rule20 (qreva (cons ?z9 ?x7) ?y8) (qreva ?x7 (cons ?z9 ?y8)))
(=> rule21 (qreva ?x7 (cons ?z9 ?y8)) (qreva (cons ?z9 ?x7) ?y8))
(=> rule22 (qrev ?x10) (qreva ?x10 nil))
(=> rule23 (qreva ?x10 nil) (qrev ?x10))
(=> rule24 (queue-to-lst (queue ?x11 ?y12)) (append ?x11 (qrev ?y12)))
(=> rule25 (append ?x11 (qrev ?y12)) (queue-to-lst (queue ?x11 ?y12)))
(=> rule26 (qlen (queue ?x13 ?y14)) (plus (len ?x13) (len ?y14)))
(=> rule27 (plus (len ?x13) (len ?y14)) (qlen (queue ?x13 ?y14)))
(=> rule28 (isAmortized (queue ?x15 ?y16)) (or (= (len ?y16) (len ?x15)) (less (len ?y16) (len ?x15))))
(=> rule29 (or (= (len ?y16) (len ?x15)) (less (len ?y16) (len ?x15))) (isAmortized (queue ?x15 ?y16)))
(=> rule30 (isEmpty (queue ?x17 ?y18)) (and (= ?x17 nil) (= ?y18 nil)))
(=> rule31 (and (= ?x17 nil) (= ?y18 nil)) (isEmpty (queue ?x17 ?y18)))
(=> rule32 (amortizeQueue ?x19 ?y20) (ite (or (= (len ?y20) (len ?x19)) (less (len ?y20) (len ?x19))) (queue ?x19 ?y20) (queue (append ?x19 (qrev ?y20)) nil)))
(=> rule33 (ite (or (= (len ?y20) (len ?x19)) (less (len ?y20) (len ?x19))) (queue ?x19 ?y20) (queue (append ?x19 (qrev ?y20)) nil)) (amortizeQueue ?x19 ?y20))
(=> rule34 (enqueue (queue ?x21 ?y22) ?n) (amortizeQueue ?x21 (cons ?n ?y22)))
(=> rule35 (amortizeQueue ?x21 (cons ?n ?y22)) (enqueue (queue ?x21 ?y22) ?n))
(=> rule36 (qpop (queue ?x23 (cons ?n ?y24))) (queue ?x23 ?y24))
(=> rule37 (qpop (queue ?x25 nil)) (queue (butlast ?x25) nil))
(=> rule38 (queue (butlast ?x25) nil) (qpop (queue ?x25 nil)))
(=> rule39 (len (append ?x26 ?y27)) (plus (len ?x26) (len ?y27)))
(=> rule40 (plus (len ?x26) (len ?y27)) (len (append ?x26 ?y27)))
(=> rule41 (len (qreva ?x28 ?y29)) (plus (len ?x28) (len ?y29)))
(=> rule42 (plus (len ?x28) (len ?y29)) (len (qreva ?x28 ?y29)))
(=> rule43 (len (qrev ?x30)) (len ?x30))
(=> rule44 (len ?x30) (len (qrev ?x30)))
(=> rule45 (plus (len ?x31) (len ?y32)) (qlen (queue ?x31 ?y32)))
(=> rule46 (qlen (queue ?x31 ?y32)) (plus (len ?x31) (len ?y32)))
(=> rule47 (succ (len (butlast (cons ?y ?x33)))) (len (cons ?y ?x33)))
(=> rule48 (len (cons ?y ?x33)) (succ (len (butlast (cons ?y ?x33)))))
(=> rule49 (qlen (enqueue ?q ?n)) (succ (qlen ?q)))
(=> rule50 (=> (and (isAmortized q) (not (isEmpty q))) (= (succ (qlen (qpop ?q))) (qlen ?q))))
(=> rule51 (=> (and (isAmortized q) (not (isEmpty q))) (= (succ (qlen (qpop ?q))) (qlen ?q))))
(=> rule52 (append ?x34 nil) ?x34)
(prove (forall ((n Nat)(x35 Lst)(y36 Lst)) (= (butlast (append x35 (cons n y36))) (append x35 (butlast (cons n y36))))))
