(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(datatype Tree () ((node Nat Tree Tree Tree) (leaf Tree)))
(declare-fun less (Nat Nat) Bool)
(declare-fun plus (Nat Nat) Nat)
(declare-fun nmax (Nat Nat) Nat)
(declare-fun append (Lst Lst) Lst)
(declare-fun len (Lst) Nat)
(declare-fun mem (Nat Lst) Bool)
(declare-fun tinsert (Tree Nat) Tree)
(declare-fun height (Tree) Nat)
(declare-fun tinsert-all (Tree Lst) Tree)
(declare-fun tsize (Tree) Nat)
(declare-fun tremove (Tree Nat) Tree)
(declare-fun tremove-all (Tree Lst) Tree)
(declare-fun tcontains (Tree Nat) Bool)
(declare-fun tsorted (Tree) Bool)
(declare-fun tmember (Tree Nat) Bool)
(declare-fun content (Tree) Lst)
(<=> rule0 (less zero zero) false)
(=> rule1 (less zero (succ ?x)) true)
(=> rule2 (less (succ ?x) (succ ?y)) (less ?x ?y))
(=> rule3 (less ?x ?y) (less (succ ?x) (succ ?y)))
(declare-fun leq (Nat Nat) Bool)
(=> rule4 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule5 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule6 (plus zero ?n) ?n)
(=> rule7 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule8 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(=> rule9 (nmax ?n ?m) (ite (less ?n ?m) ?m ?n))
(=> rule10 (ite (less ?n ?m) ?m ?n) (nmax ?n ?m))
(=> rule11 (append nil ?x2) ?x2)
(=> rule12 (append (cons ?x ?y3) ?z) (cons ?x (append ?y3 ?z)))
(=> rule13 (cons ?x (append ?y3 ?z)) (append (cons ?x ?y3) ?z))
(=> rule14 (len nil) zero)
(=> rule15 zero (len nil))
(=> rule16 (len (cons ?x ?y4)) (succ (len ?y4)))
(=> rule17 (mem ?x nil) false)
(=> rule18 (mem ?x (cons ?y ?z)) (or (= ?x ?y) (mem ?x ?z)))
(=> rule19 (or (= ?x ?y) (mem ?x ?z)) (mem ?x (cons ?y ?z)))
(=> rule20 (tinsert leaf ?i) (node ?i leaf leaf))
(=> rule21 (node ?i leaf leaf) (tinsert leaf ?i))
(=> rule22 (tinsert (node ?d ?l ?r) ?i) (ite (less ?d ?i) (node ?d ?l (tinsert ?r ?i)) (node ?d (tinsert ?l ?i) ?r)))
(=> rule23 (ite (less ?d ?i) (node ?d ?l (tinsert ?r ?i)) (node ?d (tinsert ?l ?i) ?r)) (tinsert (node ?d ?l ?r) ?i))
(=> rule24 (height leaf) zero)
(=> rule25 zero (height leaf))
(=> rule26 (height (node ?x ?y5 ?z6)) (succ (nmax (height ?y5) (height ?z6))))
(=> rule27 (tinsert-all ?x7 nil) ?x7)
(=> rule28 (tinsert-all ?x8 (cons ?n ?l9)) (tinsert (tinsert-all ?x8 ?l9) ?n))
(=> rule29 (tinsert (tinsert-all ?x8 ?l9) ?n) (tinsert-all ?x8 (cons ?n ?l9)))
(=> rule30 (tsize leaf) zero)
(=> rule31 zero (tsize leaf))
(=> rule32 (tsize (node ?x ?l ?r)) (succ (plus (tsize ?l) (tsize ?r))))
(=> rule33 (tremove leaf ?i) leaf)
(=> rule34 (=> (less i d) (= (tremove (node ?d ?l ?r) ?i) (node ?d (tremove ?l ?i) ?r))))
(=> rule35 (=> (less i d) (= (tremove (node ?d ?l ?r) ?i) (node ?d (tremove ?l ?i) ?r))))
(=> rule36 (=> (less d i) (= (tremove (node ?d ?l ?r) ?i) (node ?d ?l (tremove ?r ?i)))))
(=> rule37 (=> (less d i) (= (tremove (node ?d ?l ?r) ?i) (node ?d ?l (tremove ?r ?i)))))
(=> rule38 (tremove (node ?d leaf ?r) ?d) ?r)
(=> rule39 (tremove (node ?d (node ?ld ?ll ?lr) ?r) ?d) (node ?ld (tremove (node ?ld ?ll ?lr) ?ld) ?r))
(=> rule40 (tremove-all ?x10 nil) ?x10)
(=> rule41 (tremove-all ?x11 (cons ?n ?l12)) (tremove-all (tremove ?x11 ?n) ?l12))
(=> rule42 (tremove-all (tremove ?x11 ?n) ?l12) (tremove-all ?x11 (cons ?n ?l12)))
(=> rule43 (tcontains leaf ?i) false)
(=> rule44 (tcontains (node ?d ?l ?r) ?i) (or (= ?d ?i) (tcontains ?l ?i) (tcontains ?r ?i)))
(=> rule45 (or (= ?d ?i) (tcontains ?l ?i) (tcontains ?r ?i)) (tcontains (node ?d ?l ?r) ?i))
(<=> rule46 (tsorted leaf) true)
(=> rule47 (tsorted (node ?d ?l ?r)) (and (tsorted ?l) (tsorted ?r) (forall ((x Nat)) (=> (tcontains ?l x) (or (= x ?d) (less x ?d)))) (forall ((x Nat)) (=> (tcontains ?r x) (less ?d x)))))
(=> rule48 (and (tsorted ?l) (tsorted ?r) (forall ((x Nat)) (=> (tcontains ?l x) (or (= x ?d) (less x ?d)))) (forall ((x Nat)) (=> (tcontains ?r x) (less ?d x)))) (tsorted (node ?d ?l ?r)))
(=> rule49 (tmember leaf ?x) false)
(=> rule50 (tmember (node ?d ?l ?r) ?i) (ite (= ?i ?d) true (tmember (ite (less ?d ?i) ?r ?l) ?i)))
(=> rule51 (ite (= ?i ?d) true (tmember (ite (less ?d ?i) ?r ?l) ?i)) (tmember (node ?d ?l ?r) ?i))
(=> rule52 (content leaf) nil)
(=> rule53 nil (content leaf))
(=> rule54 (content (node ?d ?l ?r)) (append (content ?l) (cons ?d (content ?r))))
(=> rule55 (append (content ?l) (cons ?d (content ?r))) (content (node ?d ?l ?r)))
(=> rule56 (tsize (tinsert ?t ?n)) (succ (tsize ?t)))
(=> rule57 (or (= (tsize ?t) (tsize (tinsert-all ?t ?l13))) (less (tsize ?t) (tsize (tinsert-all ?t ?l13)))) true)
(=> rule58 (tsize (tinsert-all ?t ?l14)) (plus (tsize ?t) (len ?l14)))
(=> rule59 (plus (tsize ?t) (len ?l14)) (tsize (tinsert-all ?t ?l14)))
(prove (forall ((n Nat)(t Tree)) (= (or (= (tsize (tremove t n)) (tsize t)) (less (tsize (tremove t n)) (tsize t))) true)))
