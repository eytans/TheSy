(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun drop (Nat Lst) Lst)
(declare-fun mem (Nat Lst) Bool)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (drop ?x nil) nil)
(=> rule3 (drop zero ?x2) ?x2)
(=> rule4 (drop (succ ?x) (cons ?y ?z)) (drop ?x ?z))
(=> rule5 (mem ?x nil) false)
(=> rule6 (mem ?x (cons ?y ?z)) (or (= ?x ?y) (mem ?x ?z)))
(=> rule7 (or (= ?x ?y) (mem ?x ?z)) (mem ?x (cons ?y ?z)))
(prove (forall ((x Nat)(z Lst)(y Nat)) (=> (mem x (drop y z)) (mem x z))))
(=> "(leq zero ?ts_ph_Nat_0) => true" (leq zero ?ts_ph_Nat_0) true)
(=> "(drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1)) => (drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1))" (drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1)) (drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1)))
(=> "(drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1)) => (drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1))" (drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1)) (drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1)))
(=> "(leq (succ zero) (succ ?ts_ph_Nat_0)) => true" (leq (succ zero) (succ ?ts_ph_Nat_0)) true)
(=> "(drop (succ zero) (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1)) => (drop (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1)" (drop (succ zero) (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1)) (drop (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1))
(=> "(drop (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1) => (drop (succ zero) (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1))" (drop (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1) (drop (succ zero) (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1)))