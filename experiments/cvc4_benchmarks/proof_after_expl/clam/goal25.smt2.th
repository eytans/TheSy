(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun plus (Nat Nat) Nat)
(declare-fun even (Nat) Bool)
(declare-fun append (Lst Lst) Lst)
(declare-fun len (Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (plus zero ?n) ?n)
(=> rule3 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule4 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(=> rule5 (even zero) true)
(=> rule6 true (even zero))
(=> rule7 (even (succ ?n)) (not (even ?n)))
(=> rule8 (not (even ?n)) (even (succ ?n)))
(=> rule9 (append nil ?x) ?x)
(=> rule10 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule11 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule12 (len nil) zero)
(=> rule13 zero (len nil))
(=> rule14 (len (cons ?x3 ?y)) (succ (len ?y)))
(prove (forall ((y Lst)(x Lst)) (= (even (len (append x y))) (even (plus (len x) (len y))))))
(=> "(plus ?ts_ph_Nat_0 zero) => ?ts_ph_Nat_0" (plus ?ts_ph_Nat_0 zero) ?ts_ph_Nat_0)
(=> "(leq zero ?ts_ph_Nat_0) => true" (leq zero ?ts_ph_Nat_0) true)
(=> "(append ?ts_ph_Lst_0 nil) => ?ts_ph_Lst_0" (append ?ts_ph_Lst_0 nil) ?ts_ph_Lst_0)
(=> "(succ ?ts_ph_Nat_0) => (plus ?ts_ph_Nat_0 (succ zero))" (succ ?ts_ph_Nat_0) (plus ?ts_ph_Nat_0 (succ zero)))
(=> "(plus ?ts_ph_Nat_0 (succ zero)) => (succ ?ts_ph_Nat_0)" (plus ?ts_ph_Nat_0 (succ zero)) (succ ?ts_ph_Nat_0))
(=> "(leq (succ zero) (succ ?ts_ph_Nat_0)) => true" (leq (succ zero) (succ ?ts_ph_Nat_0)) true)
(=> "(succ (plus ?ts_ph_Nat_0 ?ts_ph_Nat_1)) => (plus ?ts_ph_Nat_0 (succ ?ts_ph_Nat_1))" (succ (plus ?ts_ph_Nat_0 ?ts_ph_Nat_1)) (plus ?ts_ph_Nat_0 (succ ?ts_ph_Nat_1)))
(=> "(plus ?ts_ph_Nat_0 (succ ?ts_ph_Nat_1)) => (succ (plus ?ts_ph_Nat_0 ?ts_ph_Nat_1))" (plus ?ts_ph_Nat_0 (succ ?ts_ph_Nat_1)) (succ (plus ?ts_ph_Nat_0 ?ts_ph_Nat_1)))
(=> "(plus ?ts_ph_Nat_1 ?ts_ph_Nat_0) => (plus ?ts_ph_Nat_0 ?ts_ph_Nat_1)" (plus ?ts_ph_Nat_1 ?ts_ph_Nat_0) (plus ?ts_ph_Nat_0 ?ts_ph_Nat_1))
(=> "(plus ?ts_ph_Nat_0 ?ts_ph_Nat_1) => (plus ?ts_ph_Nat_1 ?ts_ph_Nat_0)" (plus ?ts_ph_Nat_0 ?ts_ph_Nat_1) (plus ?ts_ph_Nat_1 ?ts_ph_Nat_0))
(=> "(even (plus ?ts_ph_Nat_0 ?ts_ph_Nat_0)) => true" (even (plus ?ts_ph_Nat_0 ?ts_ph_Nat_0)) true)
(=> "(append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)) => (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2)" (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)) (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2))
(=> "(append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2) => (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2))" (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2) (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)))
(=> "(plus ?ts_ph_Nat_0 (plus ?ts_ph_Nat_1 ?ts_ph_Nat_2)) => (plus ?ts_ph_Nat_1 (plus ?ts_ph_Nat_0 ?ts_ph_Nat_2))" (plus ?ts_ph_Nat_0 (plus ?ts_ph_Nat_1 ?ts_ph_Nat_2)) (plus ?ts_ph_Nat_1 (plus ?ts_ph_Nat_0 ?ts_ph_Nat_2)))
(=> "(plus ?ts_ph_Nat_1 (plus ?ts_ph_Nat_0 ?ts_ph_Nat_2)) => (plus ?ts_ph_Nat_0 (plus ?ts_ph_Nat_1 ?ts_ph_Nat_2))" (plus ?ts_ph_Nat_1 (plus ?ts_ph_Nat_0 ?ts_ph_Nat_2)) (plus ?ts_ph_Nat_0 (plus ?ts_ph_Nat_1 ?ts_ph_Nat_2)))
(=> "(plus (len ?ts_ph_Lst_0) (len ?ts_ph_Lst_1)) => (len (append ?ts_ph_Lst_0 ?ts_ph_Lst_1))" (plus (len ?ts_ph_Lst_0) (len ?ts_ph_Lst_1)) (len (append ?ts_ph_Lst_0 ?ts_ph_Lst_1)))
(=> "(len (append ?ts_ph_Lst_0 ?ts_ph_Lst_1)) => (plus (len ?ts_ph_Lst_0) (len ?ts_ph_Lst_1))" (len (append ?ts_ph_Lst_0 ?ts_ph_Lst_1)) (plus (len ?ts_ph_Lst_0) (len ?ts_ph_Lst_1)))
(=> "(leq (succ zero) (plus ?ts_ph_Nat_0 ?ts_ph_Nat_0)) => (leq (succ zero) ?ts_ph_Nat_0)" (leq (succ zero) (plus ?ts_ph_Nat_0 ?ts_ph_Nat_0)) (leq (succ zero) ?ts_ph_Nat_0))
(=> "(leq (succ zero) ?ts_ph_Nat_0) => (leq (succ zero) (plus ?ts_ph_Nat_0 ?ts_ph_Nat_0))" (leq (succ zero) ?ts_ph_Nat_0) (leq (succ zero) (plus ?ts_ph_Nat_0 ?ts_ph_Nat_0)))