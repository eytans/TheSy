(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun len (Lst) Nat)
(declare-fun rotate (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule4 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule5 (len nil) zero)
(=> rule6 zero (len nil))
(=> rule7 (len (cons ?x3 ?y)) (succ (len ?y)))
(=> rule8 (rotate zero ?x) ?x)
(=> rule9 (rotate (succ ?n) nil) nil)
(=> rule10 (rotate (succ ?n) (cons ?y4 ?x)) (rotate ?n (append ?x (cons ?y4 nil))))
(=> rule11 (rotate ?n (append ?x (cons ?y4 nil))) (rotate (succ ?n) (cons ?y4 ?x)))
(prove (forall ((y Lst)(x Lst)) (= (rotate (len x) (append x y)) (append y x))))
(=> "(rotate ?ts_ph_Nat_0 nil) => nil" (rotate ?ts_ph_Nat_0 nil) nil)
(=> "(leq zero ?ts_ph_Nat_0) => true" (leq zero ?ts_ph_Nat_0) true)
(=> "(append ?ts_ph_Lst_0 nil) => ?ts_ph_Lst_0" (append ?ts_ph_Lst_0 nil) ?ts_ph_Lst_0)
(=> "(leq (succ zero) (succ ?ts_ph_Nat_0)) => true" (leq (succ zero) (succ ?ts_ph_Nat_0)) true)
(=> "(rotate ?ts_ph_Nat_0 (cons zero nil)) => (cons zero nil)" (rotate ?ts_ph_Nat_0 (cons zero nil)) (cons zero nil))
(=> "(rotate (len ?ts_ph_Lst_0) (cons ?ts_ph_Nat_1 nil)) => (cons ?ts_ph_Nat_1 nil)" (rotate (len ?ts_ph_Lst_0) (cons ?ts_ph_Nat_1 nil)) (cons ?ts_ph_Nat_1 nil))
(=> "(append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)) => (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2)" (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)) (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2))
(=> "(append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2) => (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2))" (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2) (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)))
(=> "(rotate ?ts_ph_Nat_0 (cons ?ts_ph_Nat_1 nil)) => (cons ?ts_ph_Nat_1 nil)" (rotate ?ts_ph_Nat_0 (cons ?ts_ph_Nat_1 nil)) (cons ?ts_ph_Nat_1 nil))
(=> "(append ?ts_ph_Lst_1 ?ts_ph_Lst_0) => (rotate (len ?ts_ph_Lst_0) (append ?ts_ph_Lst_0 ?ts_ph_Lst_1))" (append ?ts_ph_Lst_1 ?ts_ph_Lst_0) (rotate (len ?ts_ph_Lst_0) (append ?ts_ph_Lst_0 ?ts_ph_Lst_1)))
(=> "(rotate (len ?ts_ph_Lst_0) (append ?ts_ph_Lst_0 ?ts_ph_Lst_1)) => (append ?ts_ph_Lst_1 ?ts_ph_Lst_0)" (rotate (len ?ts_ph_Lst_0) (append ?ts_ph_Lst_0 ?ts_ph_Lst_1)) (append ?ts_ph_Lst_1 ?ts_ph_Lst_0))
(=> "(rotate (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1) => (rotate (succ zero) (rotate ?ts_ph_Nat_0 ?ts_ph_Lst_1))" (rotate (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1) (rotate (succ zero) (rotate ?ts_ph_Nat_0 ?ts_ph_Lst_1)))
(=> "(rotate (succ zero) (rotate ?ts_ph_Nat_0 ?ts_ph_Lst_1)) => (rotate (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1)" (rotate (succ zero) (rotate ?ts_ph_Nat_0 ?ts_ph_Lst_1)) (rotate (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1))
(=> "(rotate ?ts_ph_Nat_1 (rotate ?ts_ph_Nat_0 ?ts_ph_Lst_1)) => (rotate ?ts_ph_Nat_0 (rotate ?ts_ph_Nat_1 ?ts_ph_Lst_1))" (rotate ?ts_ph_Nat_1 (rotate ?ts_ph_Nat_0 ?ts_ph_Lst_1)) (rotate ?ts_ph_Nat_0 (rotate ?ts_ph_Nat_1 ?ts_ph_Lst_1)))
(=> "(rotate ?ts_ph_Nat_0 (rotate ?ts_ph_Nat_1 ?ts_ph_Lst_1)) => (rotate ?ts_ph_Nat_1 (rotate ?ts_ph_Nat_0 ?ts_ph_Lst_1))" (rotate ?ts_ph_Nat_0 (rotate ?ts_ph_Nat_1 ?ts_ph_Lst_1)) (rotate ?ts_ph_Nat_1 (rotate ?ts_ph_Nat_0 ?ts_ph_Lst_1)))