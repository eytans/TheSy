(datatype Nat () ((succ Nat Nat) (zero Nat)))
(declare-fun minus (Nat Nat) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (minus zero ?n) zero)
(=> rule3 (minus ?n zero) ?n)
(=> rule4 (minus (succ ?n) (succ ?m)) (minus ?n ?m))
(=> rule5 (minus ?n ?m) (minus (succ ?n) (succ ?m)))
(prove (forall ((k Nat)(m Nat)(n Nat)) (= (minus (minus (succ m) n) (succ k)) (minus (minus m n) k))))
(=> "(minus ?ts_ph_Nat_0 ?ts_ph_Nat_0) => zero" (minus ?ts_ph_Nat_0 ?ts_ph_Nat_0) zero)
(=> "(leq zero ?ts_ph_Nat_0) => true" (leq zero ?ts_ph_Nat_0) true)
(=> "(minus ?ts_ph_Nat_0 (succ ?ts_ph_Nat_0)) => zero" (minus ?ts_ph_Nat_0 (succ ?ts_ph_Nat_0)) zero)
(=> "(leq (succ zero) (succ ?ts_ph_Nat_0)) => true" (leq (succ zero) (succ ?ts_ph_Nat_0)) true)
(=> "(minus (succ ?ts_ph_Nat_0) ?ts_ph_Nat_0) => (succ zero)" (minus (succ ?ts_ph_Nat_0) ?ts_ph_Nat_0) (succ zero))
(=> "(minus ?ts_ph_Nat_1 (succ ?ts_ph_Nat_0)) => (minus (minus ?ts_ph_Nat_1 ?ts_ph_Nat_0) (succ zero))" (minus ?ts_ph_Nat_1 (succ ?ts_ph_Nat_0)) (minus (minus ?ts_ph_Nat_1 ?ts_ph_Nat_0) (succ zero)))
(=> "(minus (minus ?ts_ph_Nat_1 ?ts_ph_Nat_0) (succ zero)) => (minus ?ts_ph_Nat_1 (succ ?ts_ph_Nat_0))" (minus (minus ?ts_ph_Nat_1 ?ts_ph_Nat_0) (succ zero)) (minus ?ts_ph_Nat_1 (succ ?ts_ph_Nat_0)))
(=> "(minus (minus ?ts_ph_Nat_1 ?ts_ph_Nat_0) ?ts_ph_Nat_1) => zero" (minus (minus ?ts_ph_Nat_1 ?ts_ph_Nat_0) ?ts_ph_Nat_1) zero)