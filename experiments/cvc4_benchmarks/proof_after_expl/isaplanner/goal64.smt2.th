(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun len (Lst) Nat)
(declare-fun drop (Nat Lst) Lst)
(declare-fun last (Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (less ?x zero) false)
(=> rule3 (less zero (succ ?x)) true)
(=> rule4 (less (succ ?x) (succ ?y)) (less ?x ?y))
(=> rule5 (less ?x ?y) (less (succ ?x) (succ ?y)))
(=> rule6 (len nil) zero)
(=> rule7 zero (len nil))
(=> rule8 (len (cons ?x ?y2)) (succ (len ?y2)))
(=> rule9 (drop ?x nil) nil)
(=> rule10 (drop zero ?x3) ?x3)
(=> rule11 (drop (succ ?x) (cons ?y ?z)) (drop ?x ?z))
(=> rule12 (last (cons ?x ?y4)) (ite (= ?y4 nil) ?x (last ?y4)))
(=> rule13 (ite (= ?y4 nil) ?x (last ?y4)) (last (cons ?x ?y4)))
(prove (forall ((n Nat)(xs Lst)) (=> (less n (len xs)) (= (last (drop n xs)) (last xs)))))
(=> "(less ?ts_ph_Nat_0 ?ts_ph_Nat_0) => false" (less ?ts_ph_Nat_0 ?ts_ph_Nat_0) false)
(=> "(leq zero ?ts_ph_Nat_0) => true" (leq zero ?ts_ph_Nat_0) true)
(=> "(less (succ ?ts_ph_Nat_0) ?ts_ph_Nat_0) => false" (less (succ ?ts_ph_Nat_0) ?ts_ph_Nat_0) false)
(=> "(drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1)) => (drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1))" (drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1)) (drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1)))
(=> "(drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1)) => (drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1))" (drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1)) (drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1)))
(=> "(leq (succ zero) (succ ?ts_ph_Nat_0)) => true" (leq (succ zero) (succ ?ts_ph_Nat_0)) true)
(=> "(leq (succ zero) (succ ?ts_ph_Nat_0)) => (less ?ts_ph_Nat_0 (succ ?ts_ph_Nat_0))" (leq (succ zero) (succ ?ts_ph_Nat_0)) (less ?ts_ph_Nat_0 (succ ?ts_ph_Nat_0)))
(=> "(less ?ts_ph_Nat_0 (succ ?ts_ph_Nat_0)) => (leq (succ zero) (succ ?ts_ph_Nat_0))" (less ?ts_ph_Nat_0 (succ ?ts_ph_Nat_0)) (leq (succ zero) (succ ?ts_ph_Nat_0)))
(=> "(drop (len ?ts_ph_Lst_0) ?ts_ph_Lst_0) => nil" (drop (len ?ts_ph_Lst_0) ?ts_ph_Lst_0) nil)
(=> "(drop (succ zero) (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1)) => (drop (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1)" (drop (succ zero) (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1)) (drop (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1))
(=> "(drop (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1) => (drop (succ zero) (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1))" (drop (succ ?ts_ph_Nat_0) ?ts_ph_Lst_1) (drop (succ zero) (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1)))
(=> "(drop ?ts_ph_Nat_1 (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1)) => (drop ?ts_ph_Nat_0 (drop ?ts_ph_Nat_1 ?ts_ph_Lst_1))" (drop ?ts_ph_Nat_1 (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1)) (drop ?ts_ph_Nat_0 (drop ?ts_ph_Nat_1 ?ts_ph_Lst_1)))
(=> "(drop ?ts_ph_Nat_0 (drop ?ts_ph_Nat_1 ?ts_ph_Lst_1)) => (drop ?ts_ph_Nat_1 (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1))" (drop ?ts_ph_Nat_0 (drop ?ts_ph_Nat_1 ?ts_ph_Lst_1)) (drop ?ts_ph_Nat_1 (drop ?ts_ph_Nat_0 ?ts_ph_Lst_1)))