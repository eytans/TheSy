(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun P (Nat) Bool)
(declare-fun append (Lst Lst) Lst)
(declare-fun filter (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule4 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule5 (filter nil) nil)
(=> rule6 nil (filter nil))
(=> rule7 (filter (cons ?x3 ?y)) (ite (P ?x3) (cons ?x3 (filter ?y)) (filter ?y)))
(=> rule8 (ite (P ?x3) (cons ?x3 (filter ?y)) (filter ?y)) (filter (cons ?x3 ?y)))
(prove (forall ((ys Lst)(xs Lst)) (= (filter (append xs ys)) (append (filter xs) (filter ys)))))
(=> "(leq zero ?ts_ph_Nat_0) => true" (leq zero ?ts_ph_Nat_0) true)
(=> "(append ?ts_ph_Lst_0 nil) => ?ts_ph_Lst_0" (append ?ts_ph_Lst_0 nil) ?ts_ph_Lst_0)
(=> "(leq (succ zero) (succ ?ts_ph_Nat_0)) => true" (leq (succ zero) (succ ?ts_ph_Nat_0)) true)
(=> "(filter ?ts_ph_Lst_0) => (filter (filter ?ts_ph_Lst_0))" (filter ?ts_ph_Lst_0) (filter (filter ?ts_ph_Lst_0)))
(=> "(filter (filter ?ts_ph_Lst_0)) => (filter ?ts_ph_Lst_0)" (filter (filter ?ts_ph_Lst_0)) (filter ?ts_ph_Lst_0))
(=> "(append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)) => (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2)" (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)) (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2))
(=> "(append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2) => (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2))" (append (append ?ts_ph_Lst_0 ?ts_ph_Lst_1) ?ts_ph_Lst_2) (append ?ts_ph_Lst_0 (append ?ts_ph_Lst_1 ?ts_ph_Lst_2)))
(=> "(filter (append ?ts_ph_Lst_0 ?ts_ph_Lst_1)) => (append (filter ?ts_ph_Lst_0) (filter ?ts_ph_Lst_1))" (filter (append ?ts_ph_Lst_0 ?ts_ph_Lst_1)) (append (filter ?ts_ph_Lst_0) (filter ?ts_ph_Lst_1)))
(=> "(append (filter ?ts_ph_Lst_0) (filter ?ts_ph_Lst_1)) => (filter (append ?ts_ph_Lst_0 ?ts_ph_Lst_1))" (append (filter ?ts_ph_Lst_0) (filter ?ts_ph_Lst_1)) (filter (append ?ts_ph_Lst_0 ?ts_ph_Lst_1)))