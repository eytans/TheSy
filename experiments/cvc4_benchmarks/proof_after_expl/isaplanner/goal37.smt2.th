(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun mem (Nat Lst) Bool)
(declare-fun delete (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (mem ?x nil) false)
(=> rule3 (mem ?x (cons ?y ?z)) (or (= ?x ?y) (mem ?x ?z)))
(=> rule4 (or (= ?x ?y) (mem ?x ?z)) (mem ?x (cons ?y ?z)))
(=> rule5 (delete ?x nil) nil)
(=> rule6 (delete ?x (cons ?y ?z)) (ite (= ?x ?y) (delete ?x ?z) (cons ?y (delete ?x ?z))))
(=> rule7 (ite (= ?x ?y) (delete ?x ?z) (cons ?y (delete ?x ?z))) (delete ?x (cons ?y ?z)))
(prove (forall ((l Lst)(x Nat)) (= (not (mem x (delete x l))) true)))
(=> "(leq zero ?ts_ph_Nat_0) => true" (leq zero ?ts_ph_Nat_0) true)
(=> "(leq (succ zero) (succ ?ts_ph_Nat_0)) => true" (leq (succ zero) (succ ?ts_ph_Nat_0)) true)
(=> "(delete ?ts_ph_Nat_1 ?ts_ph_Lst_0) => (delete ?ts_ph_Nat_1 (delete ?ts_ph_Nat_1 ?ts_ph_Lst_0))" (delete ?ts_ph_Nat_1 ?ts_ph_Lst_0) (delete ?ts_ph_Nat_1 (delete ?ts_ph_Nat_1 ?ts_ph_Lst_0)))
(=> "(delete ?ts_ph_Nat_1 (delete ?ts_ph_Nat_1 ?ts_ph_Lst_0)) => (delete ?ts_ph_Nat_1 ?ts_ph_Lst_0)" (delete ?ts_ph_Nat_1 (delete ?ts_ph_Nat_1 ?ts_ph_Lst_0)) (delete ?ts_ph_Nat_1 ?ts_ph_Lst_0))
(=> "(cons ?ts_ph_Nat_0 nil) => (delete (succ ?ts_ph_Nat_0) (cons ?ts_ph_Nat_0 nil))" (cons ?ts_ph_Nat_0 nil) (delete (succ ?ts_ph_Nat_0) (cons ?ts_ph_Nat_0 nil)))
(=> "(delete (succ ?ts_ph_Nat_0) (cons ?ts_ph_Nat_0 nil)) => (cons ?ts_ph_Nat_0 nil)" (delete (succ ?ts_ph_Nat_0) (cons ?ts_ph_Nat_0 nil)) (cons ?ts_ph_Nat_0 nil))