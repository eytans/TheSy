(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun drop (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (drop ?x nil) nil)
(=> rule3 (drop zero ?x2) ?x2)
(=> rule4 (drop (succ ?x) (cons ?y ?z)) (drop ?x ?z))
(=> rule5 (drop (succ ?v) (drop ?w (drop ?x (cons ?y ?z)))) (drop ?v (drop ?w (drop ?x ?z))))
(=> rule6 (drop (succ ?u) (drop ?v (drop (succ ?w) (cons ?x (cons ?y ?z))))) (drop (succ ?u) (drop ?v (drop ?w (cons ?x ?z)))))
(prove (forall ((z Lst)(x Nat)(w Nat)(y Nat)) (= (drop w (drop x (drop y z))) (drop y (drop x (drop w z))))))
(=> "(leq zero ?ts_ph_Nat_0) => true" (leq zero ?ts_ph_Nat_0) true)
(=> "(drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1)) => (drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1))" (drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1)) (drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1)))
(=> "(drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1)) => (drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1))" (drop ?ts_ph_Nat_0 (cons zero ?ts_ph_Lst_1)) (drop ?ts_ph_Nat_0 (cons ?ts_ph_Nat_0 ?ts_ph_Lst_1)))
(=> "(leq (succ zero) (succ ?ts_ph_Nat_0)) => true" (leq (succ zero) (succ ?ts_ph_Nat_0)) true)