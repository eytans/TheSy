(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun len (Lst) Nat)
(declare-fun append (Lst Lst) Lst)
(declare-fun rotate (Nat Lst) Lst)
(declare-fun plus (Nat Nat) Nat)
(=> rule0 (len nil) zero)
(=> rule1 zero (len nil))
(=> rule2 (len (cons ?x ?y)) (succ (len ?y)))
(=> rule3 (append nil ?x0) ?x0)
(=> rule4 (append (cons ?x ?y) ?z) (cons ?x (append ?y ?z)))
(=> rule5 (cons ?x (append ?y ?z)) (append (cons ?x ?y) ?z))
(=> rule6 (rotate zero ?x1) ?x1)
(=> rule7 (rotate (succ ?n) nil) nil)
(=> rule8 (rotate (succ ?n) (cons ?y2 ?x3)) (rotate ?n (append ?x3 (cons ?y2 nil))))
(=> rule9 (rotate ?n (append ?x3 (cons ?y2 nil))) (rotate (succ ?n) (cons ?y2 ?x3)))
(=> rule10 (plus zero ?n) ?n)
(=> rule11 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule12 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(prove (forall ((n Nat)(m Nat)(x4 Lst)) (= (rotate (succ n) (rotate m x4)) (rotate (succ m) (rotate n x4)))))
