(minus (plus k m) (plus k n))
(minus m n)
(take n (append xs ys))
(append (take n xs) (take (minus n (len xs)) ys))
(take zero xs)
nil
(rev (drop i xs))
(take (minus (len xs) i) (rev xs))
(or (= (len (filter xs)) (len xs)) (less (len (filter xs)) (len xs)))
(minus (minus i j) k)
(minus i (plus j k))
(or (= (len (delete x l)) (len l)) (less (len (delete x l)) (len l)))
(drop n (append xs ys))
(append (drop n xs) (drop (minus n (len xs)) ys))
(minus (minus (succ m) n) (succ k))
(minus (minus m n) k)
(less n (len xs))
(last (drop n xs))
(last xs)
(= (len xs) (len ys))
(zip (rev xs) (rev ys))
(zrev (zip xs ys))
(= xs nil)
(last (cons x xs))
x
(len (drop n xs))
(minus (len xs) n)
(take n (lmap xs))
(lmap (take n xs))
(ztake n (zip xs ys))
(zip (take n xs) (take n ys))
(take (succ n) (cons x xs))
(cons x (take n xs))
(rev (take i xs))
(drop (minus (len xs) i) (rev xs))
(len (sort l))
(len l)
(minus (plus m n) n)
m
(butlast (append xs ys))
(ite (= ys nil) (butlast xs) (append xs (butlast ys)))
(len (butlast xs))
(minus (len xs) (succ zero))
(minus n (plus n m))
zero
(minus (plus n m) n)
m
(butlast (append xs (cons x5 nil)))
xs
(len (insort x l))
(succ (len l))
(zip (append xs ys) zs)
(zappend (zip xs (take (len xs) zs)) (zip ys (drop (len xs) zs)))
(not (= xs nil))
(last (cons x xs))
(last xs)
(minus m m)
zero
(minus (minus i j) k)
(minus (minus i k) j)
(not (= xs nil))
(butlast (append xs (cons (last xs) nil)))
xs
(drop n (take m xs))
(take (minus m n) (drop n xs))
(zip xs (append ys zs))
(zappend (zip (take (len ys) xs) ys) (zip (drop (len ys) xs) zs))
(forall ((x Nat)) (P x))
(takeWhile xs)
xs
