(minus (plus k m) (plus k n))
(minus m n)
(take n (append xs ys))
(append (take n xs) (take (minus n (len xs)) ys))
(rev (drop i xs))
(take (minus (len xs) i) (rev xs))
(or (= (len (filter xs)) (len xs)) (less (len (filter xs)) (len xs)))
(minus (minus i j) k)
(minus i (plus j k))
(or (= (len (delete x l)) (len l)) (less (len (delete x l)) (len l)))
(drop n (append xs ys))
(append (drop n xs) (drop (minus n (len xs)) ys))
(minus (minus (succ m) n) (succ k))
(minus (minus m n) k)
(less n (len xs))
(last (drop n xs))
(last xs)
(= (len xs) (len ys))
(zip (rev xs) (rev ys))
(zrev (zip xs ys))
(= (xs : Lst) nil)
(last (cons x (xs : Lst)))
x
(len (drop n xs))
(minus (len xs) n)
(rev (take i xs))
(drop (minus (len xs) i) (rev xs))
(len (sort l))
(len l)
(minus (plus m n) n)
m
(butlast (append xs ys))
(ite (= ys nil) (butlast xs) (append xs (butlast ys)))
(minus n (plus n m))
zero
(minus (plus n m) n)
m
(butlast (append xs (cons x5 nil)))
xs
(len (insort x l))
(succ (len l))
(butlast xs)
(take (minus (len xs) (succ zero)) xs)
(zip (append xs ys) zs)
(zappend (zip xs (take (len xs) zs)) (zip ys (drop (len xs) zs)))
(not (= (xs : Lst) nil))
(last (cons x (xs : Lst)))
(last (xs : Lst))
(minus m m)
zero
(minus (minus i j) k)
(minus (minus i k) j)
(not (= xs nil))
(butlast (append xs (cons (last xs) nil)))
xs
(drop n (take m xs))
(take (minus m n) (drop n xs))
(zip xs (append ys zs))
(zappend (zip (take (len ys) xs) ys) (zip (drop (len ys) xs) zs))
