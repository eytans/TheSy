(not (= ys nil))
(last (append xs ys))
(last ys)
(minus (plus k m) (plus k n))
(minus m n)
(take n (append xs ys))
(append (take n xs) (take (minus n (len xs)) ys))
(rev (drop i xs))
(take (minus (len xs) i) (rev xs))
(or (= (len (filter xs)) (len xs)) (less (len (filter xs)) (len xs)))
(minus (minus i j) k)
(minus i (plus j k))
(mem x6 t)
(mem x6 (append l t))
(or (= (len (delete x l)) (len l)) (less (len (delete x l)) (len l)))
(append (takeWhile xs) (dropWhile xs))
xs
(drop n (append xs ys))
(append (drop n xs) (drop (minus n (len xs)) ys))
(minus (minus (succ m) n) (succ k))
(minus (minus m n) k)
(less n (len xs))
(last (drop n xs))
(last xs)
(= ys nil)
(last (append xs ys))
(last xs)
(count n (append x (cons n nil)))
(succ (count n x))
(= (len xs) (len ys))
(zip (rev xs) (rev ys))
(zrev (zip xs ys))
(len (drop n xs))
(minus (len xs) n)
(mem x6 l)
(mem x6 (append l t))
(not (= n h))
(count n (append x (cons h nil)))
(count n x)
(plus (count n l) (count n m6))
(count n (append l m6))
(len (sort l))
(len l)
(minus (plus m n) n)
m
(butlast (append xs ys))
(ite (= ys nil) (butlast xs) (append xs (butlast ys)))
(len (butlast xs))
(minus (len xs) (succ zero))
(filter (append xs ys))
(append (filter xs) (filter ys))
(count n l)
(count n (rev l))
(minus n (plus n m))
zero
(append (take n xs) (drop n xs))
xs
(minus (plus n m) n)
m
(butlast (append xs (cons x5 nil)))
xs
(len (insort x l))
(succ (len l))
(butlast xs)
(take (minus (len xs) (succ zero)) xs)
(zip (append xs ys) zs)
(zappend (zip xs (take (len xs) zs)) (zip ys (drop (len xs) zs)))
(minus m m)
zero
(minus (minus i j) k)
(minus (minus i k) j)
(last (append xs (cons x5 nil)))
x5
(not (= xs nil))
(butlast (append xs (cons (last xs) nil)))
xs
(mem x6 (append l (cons x6 nil)))
(drop n (take m xs))
(take (minus m n) (drop n xs))
(last (append xs ys))
(ite (= ys nil) (last xs) (last ys))
(zip xs (append ys zs))
(zappend (zip (take (len ys) xs) ys) (zip (drop (len ys) xs) zs))
(rev (filter xs))
(filter (rev xs))
