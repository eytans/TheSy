(minus (plus k m) (plus k n))
(minus m n)
(take n (append xs ys))
(append (take n xs) (take (minus n (len xs)) ys))
(take n (drop m xs))
(drop m (take (plus n m) xs))
(rev (drop i xs))
(take (minus (len xs) i) (rev xs))
(or (= (len (filter xs)) (len xs)) (less (len (filter xs)) (len xs)))
(minus (minus i j) k)
(minus i (plus j k))
(or (= (len (delete x l)) (len l)) (less (len (delete x l)) (len l)))
(drop (succ n) (cons x (xs : Lst)))
(drop n (xs : Lst))
(drop n (append xs ys))
(append (drop n xs) (drop (minus n (len xs)) ys))
(minus (minus (succ m) n) (succ k))
(minus (minus m n) k)
(less n (len xs))
(last (drop n xs))
(last xs)
(= (len xs) (len ys))
(zip (rev xs) (rev ys))
(zrev (zip xs ys))
(drop n (lmap xs))
(lmap (drop n xs))
(forall ((x Nat)) (not (P x)))
(dropWhile xs)
xs
(rev (take i xs))
(drop (minus (len xs) i) (rev xs))
(len (sort l))
(len l)
(minus (plus m n) n)
m
(drop n (drop m xs))
(drop (plus n m) xs)
(len (butlast xs))
(minus (len xs) (succ zero))
(minus n (plus n m))
zero
(minus (plus n m) n)
m
(len (insort x l))
(succ (len l))
(butlast xs)
(take (minus (len xs) (succ zero)) xs)
(zip (append xs ys) zs)
(zappend (zip xs (take (len xs) zs)) (zip ys (drop (len xs) zs)))
(minus m m)
zero
(minus (minus i j) k)
(minus (minus i k) j)
(zdrop n (zip xs ys))
(zip (drop n xs) (drop n ys))
(drop n (take m xs))
(take (minus m n) (drop n xs))
(drop zero xs)
xs
(zip xs (append ys zs))
(zappend (zip (take (len ys) xs) ys) (zip (drop (len ys) xs) zs))
