datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun less (x_0 : Nat) (x_1 : Nat) -> Bool
fun len (x_0 : Lst) -> Nat
fun delete (x_0 : Nat) (x_1 : Lst) -> Lst
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (less ?x zero) => false
rw rule1 (less zero (succ ?x)) => true
rw rule2 (less (succ ?x) (succ ?y)) => (less ?x ?y)
rw rule3 (less ?x ?y) => (less (succ ?x) (succ ?y))
rw rule4 (len nil) => zero
rw rule5 zero => (len nil)
rw rule6 (len (cons ?x ?y2)) => (succ (len ?y2))
rw rule7 (delete ?x nil) => nil
rw rule8 (delete ?x (cons ?y ?z)) => (ite (= ?x ?y) (delete ?x ?z) (cons ?y (delete ?x ?z)))
rw rule9 (ite (= ?x ?y) (delete ?x ?z) (cons ?y (delete ?x ?z))) => (delete ?x (cons ?y ?z))
prove (or (= (len (delete (?x : Nat) (?l : Lst))) (len (?l : Lst))) (less (len (delete (?x : Nat) (?l : Lst))) (len (?l : Lst)))) 
