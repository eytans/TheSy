(take n (append xs ys))
(append (take n xs) (take (minus n (len xs)) ys))
(or (= n zero) (less n zero))
(= n zero)
(take n (drop m xs))
(drop m (take (plus n m) xs))
(rev (drop i xs))
(take (minus (len xs) i) (rev xs))
(or (= (len (filter xs)) (len xs)) (less (len (filter xs)) (len xs)))
(sorted l)
(sorted (insort x l))
(or (= (len (delete x l)) (len l)) (less (len (delete x l)) (len l)))
(drop (succ n) (cons x xs))
(drop n xs)
(drop n (append xs ys))
(append (drop n xs) (drop (minus n (len xs)) ys))
(or (= (count n l) (count n (append l m))) (less (count n l) (count n (append l m))))
(or (= m n) (less m n))
(or (= m (succ n)) (less m (succ n)))
(= (len xs) (len ys))
(zip (rev xs) (rev ys))
(zrev (zip xs ys))
(drop n (lmap xs))
(lmap (drop n xs))
(nmin a b)
(nmin b a)
(len (drop n xs))
(minus (len xs) n)
(less i (succ (plus i m)))
(height (mirror a))
(height a)
(forall ((x Nat)) (not (P x)))
(dropWhile xs)
xs
(rev (take i xs))
(drop (minus (len xs) i) (rev xs))
(len (sort l))
(len l)
(= (nmax a b) b)
(or (= a b) (less a b))
(mem x (insort x l))
(or (= n (plus m n)) (less n (plus m n)))
(= (nmin a b) b)
(or (= b a) (less b a))
(drop n (drop m xs))
(drop (plus n m) xs)
(len (butlast xs))
(minus (len xs) (succ zero))
(nmin (nmin a b) c)
(nmin a (nmin b c))
(nmax (nmax a b) c)
(nmax a (nmax b c))
(nmax a b)
(nmax b a)
(less x y)
(mem x (insort y l))
(mem x l)
(or (= n (plus n m)) (less n (plus n m)))
(len (insort x l))
(succ (len l))
(butlast xs)
(take (minus (len xs) (succ zero)) xs)
(zip (append xs ys) zs)
(zappend (zip xs (take (len xs) zs)) (zip ys (drop (len xs) zs)))
(= (nmin a b) a)
(or (= a b) (less a b))
(count x l)
(count x (sort l))
(zdrop n (zip xs ys))
(zip (drop n xs) (drop n ys))
(drop n (take m xs))
(take (minus m n) (drop n xs))
(= (nmax a b) a)
(or (= b a) (less b a))
(not (= x y))
(mem x (insort y l))
(mem x l)
(sorted (sort l))
(drop zero xs)
xs
(zip xs (append ys zs))
(zappend (zip (take (len ys) xs) ys) (zip (drop (len ys) xs) zs))
(less i (succ (plus m i)))
