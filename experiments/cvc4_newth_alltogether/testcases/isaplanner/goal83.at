(minus (plus k m) (plus k n))
(minus m n)
(take zero xs)
nil
(minus (minus i j) k)
(minus i (plus j k))
(drop (succ n) (cons x xs))
(drop n xs)
(plus (count n t) (count n (cons h nil)))
(count n (cons h t))
(less n (len xs))
(last (drop n xs))
(last xs)
(drop n (lmap xs))
(lmap (drop n xs))
(len (drop n xs))
(minus (len xs) n)
(less i (succ (plus i m)))
(forall ((x Nat)) (not (P x)))
(dropWhile xs)
xs
(take n (lmap xs))
(lmap (take n xs))
(ztake n (zip xs ys))
(zip (take n xs) (take n ys))
(take (succ n) (cons x xs))
(cons x (take n xs))
(= n x)
(plus (succ zero) (count n l))
(count n (cons x l))
(plus (count n l) (count n m6))
(count n (append l m6))
(minus (plus m n) n)
m
(or (= n (plus m n)) (less n (plus m n)))
(drop n (drop m xs))
(drop (plus n m) xs)
(plus (count n (cons h nil)) (count n t))
(count n (cons h t))
(minus n (plus n m))
zero
(or (= n (plus n m)) (less n (plus n m)))
(minus (plus n m) n)
m
(zdrop n (zip xs ys))
(zip (drop n xs) (drop n ys))
(plus (succ zero) (count n l))
(count n (cons n l))
(drop n (take m xs))
(take (minus m n) (drop n xs))
(drop zero xs)
xs
(forall ((x Nat)) (P x))
(takeWhile xs)
xs
(less i (succ (plus m i)))
