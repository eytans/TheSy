datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun P (x_0 : Nat) -> Bool
fun append (x_0 : Lst) (x_1 : Lst) -> Lst
fun filter (x_0 : Lst) -> Lst
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (append nil ?x) => ?x
rw rule1 (append (cons ?x2 ?y) ?z) => (cons ?x2 (append ?y ?z))
rw rule2 (cons ?x2 (append ?y ?z)) => (append (cons ?x2 ?y) ?z)
rw rule3 (filter nil) => nil
rw rule4 nil => (filter nil)
rw rule5 (filter (cons ?x3 ?y)) => (ite (P ?x3) (cons ?x3 (filter ?y)) (filter ?y))
rw rule6 (ite (P ?x3) (cons ?x3 (filter ?y)) (filter ?y)) => (filter (cons ?x3 ?y))
prove (filter (append (?xs : Lst) (?ys : Lst)))  = (append (filter (?xs : Lst)) (filter (?ys : Lst)))
