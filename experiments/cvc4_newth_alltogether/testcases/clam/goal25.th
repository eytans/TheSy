datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun plus (x_0 : Nat) (x_1 : Nat) -> Nat
fun even (x_0 : Nat) -> Bool
fun append (x_0 : Lst) (x_1 : Lst) -> Lst
fun len (x_0 : Lst) -> Nat
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (plus zero ?n) => ?n
rw rule1 (plus (succ ?n) ?m) => (succ (plus ?n ?m))
rw rule2 (succ (plus ?n ?m)) => (plus (succ ?n) ?m)
rw rule3 (even zero) => true
rw rule4 true => (even zero)
rw rule5 (even (succ ?n)) => (not (even ?n))
rw rule6 (not (even ?n)) => (even (succ ?n))
rw rule7 (append nil ?x) => ?x
rw rule8 (append (cons ?x2 ?y) ?z) => (cons ?x2 (append ?y ?z))
rw rule9 (cons ?x2 (append ?y ?z)) => (append (cons ?x2 ?y) ?z)
rw rule10 (len nil) => zero
rw rule11 zero => (len nil)
rw rule12 (len (cons ?x3 ?y)) => (succ (len ?y))
prove (even (len (append (?x : Lst) (?y : Lst))))  = (even (plus (len (?x : Lst)) (len (?y : Lst))))
