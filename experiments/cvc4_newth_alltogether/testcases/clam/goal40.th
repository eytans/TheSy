datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun mem (x_0 : Nat) (x_1 : Lst) -> Bool
fun lst-mem (x_0 : Nat) (x_1 : Lst) -> Bool
fun lst-subset (x_0 : Lst) (x_1 : Lst) -> Bool
fun lst-eq (x_0 : Lst) (x_1 : Lst) -> Bool
fun lst-union (x_0 : Lst) (x_1 : Lst) -> Lst
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (lst-mem ?n ?x) => (mem ?n ?x)
rw rule1 (mem ?n ?x) => (lst-mem ?n ?x)
rw rule2 (lst-subset nil ?x) => true
rw rule3 (lst-subset (cons ?n ?x) ?y) => (and (lst-subset ?x ?y) (lst-mem ?n ?y))
rw rule4 (and (lst-subset ?x ?y) (lst-mem ?n ?y)) => (lst-subset (cons ?n ?x) ?y)
rw rule5 (lst-eq ?x ?y) => (and (lst-subset ?x ?y) (lst-subset ?y ?x))
rw rule6 (and (lst-subset ?x ?y) (lst-subset ?y ?x)) => (lst-eq ?x ?y)
rw rule7 (lst-union nil ?x) => ?x
rw rule8 (lst-union (cons ?n ?x) ?y) => (ite (lst-mem ?n ?y) (lst-union ?x ?y) (cons ?n (lst-union ?x ?y)))
rw rule9 (ite (lst-mem ?n ?y) (lst-union ?x ?y) (cons ?n (lst-union ?x ?y))) => (lst-union (cons ?n ?x) ?y)
prove if (lst-subset (?x : Lst) (?y : Lst)) then (lst-eq (lst-union (?x : Lst) (?y : Lst)) (?y : Lst)) 
