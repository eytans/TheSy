(rotate (len x) (append x y))
(append y x)
(not (= x y))
(=> (mem x (insort y z)) (mem x z))
(len (append x y))
(plus (len x) (len y))
(even (len (append w z)))
(even (len (append w (cons x4 (cons y5 z)))))
(not (= x y))
(count x (insort y z))
(count x z)
(= x y)
(mem x (insort y z))
(rotate (len x) x)
x
(not (= x y))
(mem x (insort y z))
(mem x z)
(len (rev x))
(len x)
(len (append x y))
(len (append y x))
(even (len (append x x)))
(even (len (append x y)))
(even (plus (len x) (len y)))
(count x (insort x y4))
(succ (count x y4))
(mem x (sort y4))
(mem x y4)
(sorted (sort x5))
(even (len (append x y)))
(even (len (append y x)))
(half (len (append x y)))
(half (len (append y x)))
(len (append x (cons y4 z)))
(succ (len (append x z)))
(len (rev (append x y)))
(plus (len x) (len y))
(rotate (len x) (append x y))
(append y x)
(len (qreva x y))
(plus (len x) (len y))
(count x (sort y4))
(count x y4)
(len (append w (cons x4 (cons y5 z))))
(succ (succ (len (append w z))))
(len (sort x5))
(len x5)
(len (append x (cons y4 nil)))
(succ (len x))
(len (append x x))
(double (len x))
(sorted x5)
(sorted (insort y x5))
(mem x (insort x y4))
