(append (append x (cons y3 nil)) z)
(append x (cons y3 z))
(qreva (qreva x (rev y)) nil)
(append y x)
(rev (rev (append x y)))
(append (rev (rev x)) (rev (rev y)))
(rotate (len x) (append x y))
(append y x)
(rev (append (rev x) y))
(append (rev y) x)
(rev x)
(qreva x nil)
(rev (qreva x (rev y)))
(append y x)
(qreva (qreva x y) nil)
(append (rev y) x)
(len (append x y))
(plus (len x) (len y))
(even (len (append w z)))
(even (len (append w (cons x4 (cons y5 z)))))
(rev (append (append x (cons y4 nil)) nil))
(cons y4 (rev (append x nil)))
(or (mem x6 y) (mem x6 z))
(mem x6 (append y z))
(qreva x y)
(append (rev x) y)
(rotate (len x) x)
x
(append (rev (rev x)) y)
(rev (rev (append x y)))
(rev (qreva x nil))
x
(append (revflat x5) y)
(qrevaflat x5 y)
(len (rev x))
(len x)
(rev (qreva x y))
(append (rev y) x)
(len (append x y))
(len (append y x))
(even (len (append x x)))
(even (len (append x y)))
(even (plus (len x) (len y)))
(rev (append (rev x) nil))
x
(qreva (qreva x nil) nil)
x
(even (len (append x y)))
(even (len (append y x)))
(half (len (append x y)))
(half (len (append y x)))
(len (append x (cons y4 z)))
(succ (len (append x z)))
(append (append x y) z)
(append x (append y z))
(len (rev (append x y)))
(plus (len x) (len y))
(rotate (len x) (append x y))
(append y x)
(len (qreva x y))
(plus (len x) (len y))
(append (append x y) (cons z3 nil))
(append x (append y (cons z3 nil)))
(rev (rev x))
x
(len (append w (cons x4 (cons y5 z))))
(succ (succ (len (append w z))))
(len (append x (cons y4 nil)))
(succ (len x))
(revflat x5)
(qrevaflat x5 nil)
(mem x6 z)
(mem x6 (append y z))
(rev (append x (append y (cons z4 nil))))
(cons z4 (rev (append x y)))
(len (append x x))
(double (len x))
(rev (append x (cons y4 nil)))
(cons y4 (rev x))
(rev (append (rev x) (rev y)))
(append y x)
(rev (append (rev x) (rev y)))
(append y x)
(append (rev x) y)
(qreva x y)
(mem x6 y)
(mem x6 (append y z))
