(datatype list () ((nil list) (cons sk list list)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun len (list) Nat)
(declare-fun butlast (list) list)
(declare-fun -2 (Nat Nat) Nat)
(=> rule0 (-2 Z ?y) Z)
(=> rule1 (-2 (S ?z) Z) (S ?z))
(=> rule2 (S ?z) (-2 (S ?z) Z))
(=> rule3 (-2 (S ?z) (S ?x2)) (-2 ?z ?x2))
(=> rule4 (-2 ?z ?x2) (-2 (S ?z) (S ?x2)))
(=> rule5 (len nil) Z)
(=> rule6 Z (len nil))
(=> rule7 (len (cons ?y0 ?xs)) (S (len ?xs)))
(=> rule8 (butlast nil) nil)
(=> rule9 nil (butlast nil))
(=> rule10 (butlast (cons ?y1 nil)) nil)
(=> rule11 (butlast (cons ?y2 (cons ?x23 ?x3))) (cons ?y2 (butlast (cons ?x23 ?x3))))
(=> rule12 (cons ?y2 (butlast (cons ?x23 ?x3))) (butlast (cons ?y2 (cons ?x23 ?x3))))
(prove (forall ((xs list)) (= (len (butlast xs)) (-2 (len xs) (S Z)))))
