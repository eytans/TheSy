(datatype list4 () ((nil4 list4) (cons4 sk list4 list4)))
(datatype Nat () ((zero Nat) (succ Nat Nat)))
(datatype list3 () ((nil3 list3) (cons3 Nat list3 list3)))
(declare-fun zip (list3 list4) list)
(declare-fun zip2 (list4 list4) list2)
(=> rule0 (zip nil3 ?y) nil)
(=> rule1 (zip2 nil4 ?y) nil2)
(=> rule2 (zip (cons3 ?z ?x2) nil4) nil)
(=> rule3 (zip2 (cons4 ?z0 ?x21) nil4) nil2)
(=> rule4 (zip (cons3 ?z ?x2) (cons4 ?x3 ?x4)) (cons (pair2 ?z ?x3) (zip ?x2 ?x4)))
(=> rule5 (cons (pair2 ?z ?x3) (zip ?x2 ?x4)) (zip (cons3 ?z ?x2) (cons4 ?x3 ?x4)))
(=> rule6 (zip2 (cons4 ?z2 ?x23) (cons4 ?x3 ?x4)) (cons2 (pair22 ?z2 ?x3) (zip2 ?x23 ?x4)))
(=> rule7 (cons2 (pair22 ?z2 ?x3) (zip2 ?x23 ?x4)) (zip2 (cons4 ?z2 ?x23) (cons4 ?x3 ?x4)))
(prove (forall ((xs list4)) (= (zip nil3 xs) nil)))
