(datatype list () ((nil list) (cons sk list list)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun map2 (fun1 list) list)
(declare-fun drop (Nat list) list)
(declare-fun apply1 (fun1 sk) sk)
(=> rule0 (map2 ?x nil) nil)
(=> rule1 (map2 ?x (cons ?z ?xs)) (cons (apply1 ?x ?z) (map2 ?x ?xs)))
(=> rule2 (cons (apply1 ?x ?z) (map2 ?x ?xs)) (map2 ?x (cons ?z ?xs)))
(=> rule3 (drop Z ?y) ?y)
(=> rule4 (drop (S ?z0) nil) nil)
(=> rule5 (drop (S ?z1) (cons ?x2 ?x3)) (drop ?z1 ?x3))
(prove (forall ((f fun1)(xs list)(n Nat)) (= (drop n (map2 f xs)) (map2 f (drop n xs)))))
