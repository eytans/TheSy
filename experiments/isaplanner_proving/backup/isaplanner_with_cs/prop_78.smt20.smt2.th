(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun <=2 (Nat Nat) Bool)
(declare-fun insort (Nat list) list)
(declare-fun sort (list) list)
(declare-fun && (Bool Bool) Bool)
(declare-fun sorted (list) Bool)
(=> rule0 (sort nil) nil)
(=> rule1 nil (sort nil))
(<=> rule2 (sorted nil) true)
(=> rule3 (<=2 Z ?y) true)
(=> rule4 (<=2 (S ?z) Z) false)
(=> rule5 (<=2 (S ?z) (S ?x2)) (<=2 ?z ?x2))
(=> rule6 (<=2 ?z ?x2) (<=2 (S ?z) (S ?x2)))
(=> rule7 (insort ?x nil) (cons ?x nil))
(=> rule8 (cons ?x nil) (insort ?x nil))
(=> rule9 (=> (not (<=2 x z)) (= (insort ?x (cons ?z ?xs)) (cons ?z (insort ?x ?xs)))))
(=> rule10 (=> (not (<=2 x z)) (= (insort ?x (cons ?z ?xs)) (cons ?z (insort ?x ?xs)))))
(=> rule11 (=> (<=2 x z) (= (insort ?x (cons ?z ?xs)) (cons ?x (cons ?z ?xs)))))
(=> rule12 (=> (<=2 x z) (= (insort ?x (cons ?z ?xs)) (cons ?x (cons ?z ?xs)))))
(=> rule13 (sort (cons ?y ?xs)) (insort ?y (sort ?xs)))
(=> rule14 (insort ?y (sort ?xs)) (sort (cons ?y ?xs)))
(=> rule15 (&& false ?y0) false)
(=> rule16 (&& true ?y1) ?y1)
(=> rule17 (sorted (cons ?y nil)) true)
(=> rule18 (sorted (cons ?y (cons ?y2 ?ys))) (&& (<=2 ?y ?y2) (sorted (cons ?y2 ?ys))))
(=> rule19 (&& (<=2 ?y ?y2) (sorted (cons ?y2 ?ys))) (sorted (cons ?y (cons ?y2 ?ys))))
(prove (forall ((xs list)) (= (sorted (sort xs)) true)))
