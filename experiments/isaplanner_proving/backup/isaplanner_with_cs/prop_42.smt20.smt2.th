(datatype list () ((nil list) (cons sk list list)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun take (Nat list) list)
(=> rule0 (take Z ?y) nil)
(=> rule1 (take (S ?z) nil) nil)
(=> rule2 (take (S ?z) (cons ?x2 ?x3)) (cons ?x2 (take ?z ?x3)))
(=> rule3 (cons ?x2 (take ?z ?x3)) (take (S ?z) (cons ?x2 ?x3)))
(prove (forall ((x sk)(xs list)(n Nat)) (= (take (S n) (cons x xs)) (cons x (take n xs)))))
