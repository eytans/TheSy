(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun == (Nat Nat) Bool)
(declare-fun count (Nat list) Nat)
(<=> rule0 (== Z Z) true)
(=> rule1 (== Z (S ?z)) false)
(=> rule2 (== (S ?x2) Z) false)
(=> rule3 (== (S ?x2) (S ?y2)) (== ?x2 ?y2))
(=> rule4 (== ?x2 ?y2) (== (S ?x2) (S ?y2)))
(=> rule5 (count ?x nil) Z)
(=> rule6 (=> (not (== x z)) (= (count ?x (cons ?z ?ys)) (count ?x ?ys))))
(=> rule7 (=> (== x z) (= (count ?x (cons ?z ?ys)) (S (count ?x ?ys)))))
(prove (forall ((n Nat)(xs list)) (= (S (count n xs)) (count n (cons n xs)))))
