(datatype list () ((nil list) (cons sk list list)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun take (Nat list) list)
(declare-fun drop (Nat list) list)
(declare-fun ++ (list list) list)
(=> rule0 (take Z ?y) nil)
(=> rule1 (take (S ?z) nil) nil)
(=> rule2 (take (S ?z) (cons ?x2 ?x3)) (cons ?x2 (take ?z ?x3)))
(=> rule3 (cons ?x2 (take ?z ?x3)) (take (S ?z) (cons ?x2 ?x3)))
(=> rule4 (drop Z ?y) ?y)
(=> rule5 (drop (S ?z) nil) nil)
(=> rule6 (drop (S ?z) (cons ?x2 ?x3)) (drop ?z ?x3))
(=> rule7 (++ nil ?y) ?y)
(=> rule8 (++ (cons ?z0 ?xs) ?y) (cons ?z0 (++ ?xs ?y)))
(=> rule9 (cons ?z0 (++ ?xs ?y)) (++ (cons ?z0 ?xs) ?y))
(prove (forall ((n Nat)(xs list)) (= (++ (take n xs) (drop n xs)) xs)))
