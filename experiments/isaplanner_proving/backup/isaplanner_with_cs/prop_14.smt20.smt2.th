(datatype list () ((nil list) (cons sk list list)))
(declare-fun filter (fun12 list) list)
(declare-fun ++ (list list) list)
(declare-fun apply12 (fun12 sk) Bool)
(=> rule0 (filter ?x nil) nil)
(=> rule1 (=> (apply12 x z) (= (filter ?x (cons ?z ?xs)) (cons ?z (filter ?x ?xs)))))
(=> rule2 (=> (apply12 x z) (= (filter ?x (cons ?z ?xs)) (cons ?z (filter ?x ?xs)))))
(=> rule3 (=> (not (apply12 x z)) (= (filter ?x (cons ?z ?xs)) (filter ?x ?xs))))
(=> rule4 (++ nil ?y) ?y)
(=> rule5 (++ (cons ?z ?xs) ?y) (cons ?z (++ ?xs ?y)))
(=> rule6 (cons ?z (++ ?xs ?y)) (++ (cons ?z ?xs) ?y))
(prove (forall ((p fun12)(ys list)(xs list)) (= (filter p (++ xs ys)) (++ (filter p xs) (filter p ys)))))
