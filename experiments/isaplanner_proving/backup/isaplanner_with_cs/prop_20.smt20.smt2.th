(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun len (list) Nat)
(declare-fun <=2 (Nat Nat) Bool)
(declare-fun insort (Nat list) list)
(declare-fun sort (list) list)
(=> rule0 (sort nil) nil)
(=> rule1 nil (sort nil))
(=> rule2 (<=2 Z ?y) true)
(=> rule3 (<=2 (S ?z) Z) false)
(=> rule4 (<=2 (S ?z) (S ?x2)) (<=2 ?z ?x2))
(=> rule5 (<=2 ?z ?x2) (<=2 (S ?z) (S ?x2)))
(=> rule6 (insort ?x nil) (cons ?x nil))
(=> rule7 (cons ?x nil) (insort ?x nil))
(=> rule8 (=> (not (<=2 x z)) (= (insort ?x (cons ?z ?xs)) (cons ?z (insort ?x ?xs)))))
(=> rule9 (=> (not (<=2 x z)) (= (insort ?x (cons ?z ?xs)) (cons ?z (insort ?x ?xs)))))
(=> rule10 (=> (<=2 x z) (= (insort ?x (cons ?z ?xs)) (cons ?x (cons ?z ?xs)))))
(=> rule11 (=> (<=2 x z) (= (insort ?x (cons ?z ?xs)) (cons ?x (cons ?z ?xs)))))
(=> rule12 (sort (cons ?y ?xs)) (insort ?y (sort ?xs)))
(=> rule13 (insort ?y (sort ?xs)) (sort (cons ?y ?xs)))
(=> rule14 (len nil) Z)
(=> rule15 Z (len nil))
(=> rule16 (len (cons ?y ?xs)) (S (len ?xs)))
(prove (forall ((xs list)) (= (len (sort xs)) (len xs))))
