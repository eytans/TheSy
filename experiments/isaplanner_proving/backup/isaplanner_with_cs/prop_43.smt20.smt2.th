(datatype list () ((nil list) (cons sk list list)))
(declare-fun takeWhile (fun12 list) list)
(declare-fun dropWhile (fun12 list) list)
(declare-fun ++ (list list) list)
(declare-fun apply12 (fun12 sk) Bool)
(=> rule0 (takeWhile ?x nil) nil)
(=> rule1 (=> (apply12 x z) (= (takeWhile ?x (cons ?z ?xs)) (cons ?z (takeWhile ?x ?xs)))))
(=> rule2 (=> (apply12 x z) (= (takeWhile ?x (cons ?z ?xs)) (cons ?z (takeWhile ?x ?xs)))))
(=> rule3 (=> (not (apply12 x z)) (= (takeWhile ?x (cons ?z ?xs)) nil)))
(=> rule4 (dropWhile ?x nil) nil)
(=> rule5 (=> (apply12 x z) (= (dropWhile ?x (cons ?z ?xs)) (dropWhile ?x ?xs))))
(=> rule6 (=> (not (apply12 x z)) (= (dropWhile ?x (cons ?z ?xs)) (cons ?z ?xs))))
(=> rule7 (++ nil ?y) ?y)
(=> rule8 (++ (cons ?z ?xs) ?y) (cons ?z (++ ?xs ?y)))
(=> rule9 (cons ?z (++ ?xs ?y)) (++ (cons ?z ?xs) ?y))
(prove (forall ((xs list)(p fun12)) (= (++ (takeWhile p xs) (dropWhile p xs)) xs)))
