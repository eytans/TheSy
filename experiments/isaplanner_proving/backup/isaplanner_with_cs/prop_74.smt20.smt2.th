(datatype list () ((nil list) (cons sk list list)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun take (Nat list) list)
(declare-fun len (list) Nat)
(declare-fun drop (Nat list) list)
(declare-fun -2 (Nat Nat) Nat)
(declare-fun ++ (list list) list)
(declare-fun rev (list) list)
(=> rule0 (-2 Z ?y) Z)
(=> rule1 (-2 (S ?z) Z) (S ?z))
(=> rule2 (S ?z) (-2 (S ?z) Z))
(=> rule3 (-2 (S ?z) (S ?x2)) (-2 ?z ?x2))
(=> rule4 (-2 ?z ?x2) (-2 (S ?z) (S ?x2)))
(=> rule5 (take Z ?y0) nil)
(=> rule6 (take (S ?z) nil) nil)
(=> rule7 (take (S ?z) (cons ?x21 ?x3)) (cons ?x21 (take ?z ?x3)))
(=> rule8 (cons ?x21 (take ?z ?x3)) (take (S ?z) (cons ?x21 ?x3)))
(=> rule9 (len nil) Z)
(=> rule10 Z (len nil))
(=> rule11 (len (cons ?y2 ?xs)) (S (len ?xs)))
(=> rule12 (drop Z ?y3) ?y3)
(=> rule13 (drop (S ?z) nil) nil)
(=> rule14 (drop (S ?z) (cons ?x24 ?x3)) (drop ?z ?x3))
(=> rule15 (++ nil ?y5) ?y5)
(=> rule16 (++ (cons ?z7 ?xs) ?y6) (cons ?z7 (++ ?xs ?y6)))
(=> rule17 (cons ?z7 (++ ?xs ?y6)) (++ (cons ?z7 ?xs) ?y6))
(=> rule18 (rev nil) nil)
(=> rule19 nil (rev nil))
(=> rule20 (rev (cons ?y8 ?xs)) (++ (rev ?xs) (cons ?y8 nil)))
(=> rule21 (++ (rev ?xs) (cons ?y8 nil)) (rev (cons ?y8 ?xs)))
(prove (forall ((xs list)(i Nat)) (= (rev (take i xs)) (drop (-2 (len xs) i) (rev xs)))))
