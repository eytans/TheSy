(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun last (list) Nat)
(declare-fun butlast (list) list)
(declare-fun ++ (list list) list)
(=> rule0 (last nil) Z)
(=> rule1 Z (last nil))
(=> rule2 (last (cons ?y nil)) ?y)
(=> rule3 (last (cons ?y (cons ?x2 ?x3))) (last (cons ?x2 ?x3)))
(=> rule4 (butlast nil) nil)
(=> rule5 nil (butlast nil))
(=> rule6 (butlast (cons ?y nil)) nil)
(=> rule7 (butlast (cons ?y (cons ?x2 ?x3))) (cons ?y (butlast (cons ?x2 ?x3))))
(=> rule8 (cons ?y (butlast (cons ?x2 ?x3))) (butlast (cons ?y (cons ?x2 ?x3))))
(=> rule9 (++ nil ?y0) ?y0)
(=> rule10 (++ (cons ?z ?xs) ?y1) (cons ?z (++ ?xs ?y1)))
(=> rule11 (cons ?z (++ ?xs ?y1)) (++ (cons ?z ?xs) ?y1))
(prove (forall ((xs list)) (=> (is-cons xs) (= (++ (butlast xs) (cons (last xs) nil)) xs))))
