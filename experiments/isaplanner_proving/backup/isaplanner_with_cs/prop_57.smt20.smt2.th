(datatype list () ((nil list) (cons sk list list)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun take (Nat list) list)
(declare-fun drop (Nat list) list)
(declare-fun -2 (Nat Nat) Nat)
(=> rule0 (-2 Z ?y) Z)
(=> rule1 (-2 (S ?z) Z) (S ?z))
(=> rule2 (S ?z) (-2 (S ?z) Z))
(=> rule3 (-2 (S ?z) (S ?x2)) (-2 ?z ?x2))
(=> rule4 (-2 ?z ?x2) (-2 (S ?z) (S ?x2)))
(=> rule5 (take Z ?y0) nil)
(=> rule6 (take (S ?z) nil) nil)
(=> rule7 (take (S ?z) (cons ?x21 ?x3)) (cons ?x21 (take ?z ?x3)))
(=> rule8 (cons ?x21 (take ?z ?x3)) (take (S ?z) (cons ?x21 ?x3)))
(=> rule9 (drop Z ?y2) ?y2)
(=> rule10 (drop (S ?z) nil) nil)
(=> rule11 (drop (S ?z) (cons ?x23 ?x3)) (drop ?z ?x3))
(prove (forall ((n Nat)(m Nat)(xs list)) (= (drop n (take m xs)) (take (-2 m n) (drop n xs)))))
