(datatype list () ((nil list) (cons sk list list)))
(declare-fun filter (fun12 list) list)
(declare-fun ++ (list list) list)
(declare-fun rev (list) list)
(declare-fun apply12 (fun12 sk) Bool)
(=> rule0 (rev nil) nil)
(=> rule1 nil (rev nil))
(=> rule2 (filter ?x nil) nil)
(=> rule3 (=> (apply12 x z) (= (filter ?x (cons ?z ?xs)) (cons ?z (filter ?x ?xs)))))
(=> rule4 (=> (apply12 x z) (= (filter ?x (cons ?z ?xs)) (cons ?z (filter ?x ?xs)))))
(=> rule5 (=> (not (apply12 x z)) (= (filter ?x (cons ?z ?xs)) (filter ?x ?xs))))
(=> rule6 (++ nil ?y) ?y)
(=> rule7 (++ (cons ?z ?xs) ?y) (cons ?z (++ ?xs ?y)))
(=> rule8 (cons ?z (++ ?xs ?y)) (++ (cons ?z ?xs) ?y))
(=> rule9 (rev (cons ?y0 ?xs)) (++ (rev ?xs) (cons ?y0 nil)))
(=> rule10 (++ (rev ?xs) (cons ?y0 nil)) (rev (cons ?y0 ?xs)))
(prove (forall ((p fun12)(xs list)) (= (rev (filter p xs)) (filter p (rev xs)))))
