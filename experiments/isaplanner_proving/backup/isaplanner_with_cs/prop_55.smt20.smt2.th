(datatype list () ((nil list) (cons sk list list)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun len (list) Nat)
(declare-fun drop (Nat list) list)
(declare-fun -2 (Nat Nat) Nat)
(declare-fun ++ (list list) list)
(=> rule0 (-2 Z ?y) Z)
(=> rule1 (-2 (S ?z) Z) (S ?z))
(=> rule2 (S ?z) (-2 (S ?z) Z))
(=> rule3 (-2 (S ?z) (S ?x2)) (-2 ?z ?x2))
(=> rule4 (-2 ?z ?x2) (-2 (S ?z) (S ?x2)))
(=> rule5 (len nil) Z)
(=> rule6 Z (len nil))
(=> rule7 (len (cons ?y0 ?xs)) (S (len ?xs)))
(=> rule8 (drop Z ?y1) ?y1)
(=> rule9 (drop (S ?z) nil) nil)
(=> rule10 (drop (S ?z) (cons ?x22 ?x3)) (drop ?z ?x3))
(=> rule11 (++ nil ?y3) ?y3)
(=> rule12 (++ (cons ?z5 ?xs) ?y4) (cons ?z5 (++ ?xs ?y4)))
(=> rule13 (cons ?z5 (++ ?xs ?y4)) (++ (cons ?z5 ?xs) ?y4))
(prove (forall ((xs list)(n Nat)(ys list)) (= (drop n (++ xs ys)) (++ (drop n xs) (drop (-2 n (len xs)) ys)))))
