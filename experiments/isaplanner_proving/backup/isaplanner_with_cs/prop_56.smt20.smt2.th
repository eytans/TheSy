(datatype list () ((nil list) (cons sk list list)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun drop (Nat list) list)
(declare-fun +2 (Nat Nat) Nat)
(=> rule0 (+2 Z ?y) ?y)
(=> rule1 (+2 (S ?z) ?y) (S (+2 ?z ?y)))
(=> rule2 (S (+2 ?z ?y)) (+2 (S ?z) ?y))
(=> rule3 (drop Z ?y0) ?y0)
(=> rule4 (drop (S ?z) nil) nil)
(=> rule5 (drop (S ?z) (cons ?x2 ?x3)) (drop ?z ?x3))
(prove (forall ((n Nat)(m Nat)(xs list)) (= (drop n (drop m xs)) (drop (+2 n m) xs))))
