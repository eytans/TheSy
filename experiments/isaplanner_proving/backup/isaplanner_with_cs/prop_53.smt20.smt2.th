(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun == (Nat Nat) Bool)
(declare-fun count (Nat list) Nat)
(declare-fun <=2 (Nat Nat) Bool)
(declare-fun insort (Nat list) list)
(declare-fun sort (list) list)
(<=> rule0 (== Z Z) true)
(=> rule1 (sort nil) nil)
(=> rule2 nil (sort nil))
(=> rule3 (== Z (S ?z)) false)
(=> rule4 (== (S ?x2) Z) false)
(=> rule5 (== (S ?x2) (S ?y2)) (== ?x2 ?y2))
(=> rule6 (== ?x2 ?y2) (== (S ?x2) (S ?y2)))
(=> rule7 (count ?x nil) Z)
(=> rule8 (=> (not (== x z)) (= (count ?x (cons ?z ?ys)) (count ?x ?ys))))
(=> rule9 (=> (== x z) (= (count ?x (cons ?z ?ys)) (S (count ?x ?ys)))))
(=> rule10 (<=2 Z ?y) true)
(=> rule11 (<=2 (S ?z) Z) false)
(=> rule12 (<=2 (S ?z) (S ?x2)) (<=2 ?z ?x2))
(=> rule13 (<=2 ?z ?x2) (<=2 (S ?z) (S ?x2)))
(=> rule14 (insort ?x nil) (cons ?x nil))
(=> rule15 (cons ?x nil) (insort ?x nil))
(=> rule16 (=> (not (<=2 x z)) (= (insort ?x (cons ?z ?xs)) (cons ?z (insort ?x ?xs)))))
(=> rule17 (=> (not (<=2 x z)) (= (insort ?x (cons ?z ?xs)) (cons ?z (insort ?x ?xs)))))
(=> rule18 (=> (<=2 x z) (= (insort ?x (cons ?z ?xs)) (cons ?x (cons ?z ?xs)))))
(=> rule19 (=> (<=2 x z) (= (insort ?x (cons ?z ?xs)) (cons ?x (cons ?z ?xs)))))
(=> rule20 (sort (cons ?y ?xs)) (insort ?y (sort ?xs)))
(=> rule21 (insort ?y (sort ?xs)) (sort (cons ?y ?xs)))
(prove (forall ((n Nat)(xs list)) (= (count n xs) (count n (sort xs)))))
