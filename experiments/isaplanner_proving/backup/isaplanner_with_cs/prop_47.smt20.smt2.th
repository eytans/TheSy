(datatype Tree () ((Leaf Tree) (Node Tree sk Tree Tree)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun mirror (Tree) Tree)
(declare-fun max (Nat Nat) Nat)
(declare-fun height (Tree) Nat)
(=> rule0 (max Z ?y) ?y)
(=> rule1 (max (S ?z) Z) (S ?z))
(=> rule2 (S ?z) (max (S ?z) Z))
(=> rule3 (max (S ?z) (S ?x2)) (S (max ?z ?x2)))
(=> rule4 (S (max ?z ?x2)) (max (S ?z) (S ?x2)))
(=> rule5 (mirror Leaf) Leaf)
(=> rule6 Leaf (mirror Leaf))
(=> rule7 (mirror (Node ?l ?y0 ?r)) (Node (mirror ?r) ?y0 (mirror ?l)))
(=> rule8 (Node (mirror ?r) ?y0 (mirror ?l)) (mirror (Node ?l ?y0 ?r)))
(=> rule9 (height Leaf) Z)
(=> rule10 Z (height Leaf))
(=> rule11 (height (Node ?l ?y1 ?r)) (S (max (height ?l) (height ?r))))
(prove (forall ((a1 Tree)) (= (height (mirror a1)) (height a1))))
