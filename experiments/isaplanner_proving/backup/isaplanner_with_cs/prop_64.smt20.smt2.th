(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun last (list) Nat)
(declare-fun ++ (list list) list)
(=> rule0 (last nil) Z)
(=> rule1 Z (last nil))
(=> rule2 (last (cons ?y nil)) ?y)
(=> rule3 (last (cons ?y (cons ?x2 ?x3))) (last (cons ?x2 ?x3)))
(=> rule4 (++ nil ?y0) ?y0)
(=> rule5 (++ (cons ?z ?xs) ?y1) (cons ?z (++ ?xs ?y1)))
(=> rule6 (cons ?z (++ ?xs ?y1)) (++ (cons ?z ?xs) ?y1))
(prove (forall ((x Nat)(xs list)) (= (last (++ xs (cons x nil))) x)))
