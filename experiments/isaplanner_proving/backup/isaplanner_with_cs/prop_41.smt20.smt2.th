(datatype list () ((nil list) (cons sk list list)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun take (Nat list) list)
(declare-fun map2 (fun1 list) list)
(declare-fun apply1 (fun1 sk) sk)
(=> rule0 (take Z ?y) nil)
(=> rule1 (take (S ?z) nil) nil)
(=> rule2 (take (S ?z) (cons ?x2 ?x3)) (cons ?x2 (take ?z ?x3)))
(=> rule3 (cons ?x2 (take ?z ?x3)) (take (S ?z) (cons ?x2 ?x3)))
(=> rule4 (map2 ?x nil) nil)
(=> rule5 (map2 ?x (cons ?z0 ?xs)) (cons (apply1 ?x ?z0) (map2 ?x ?xs)))
(=> rule6 (cons (apply1 ?x ?z0) (map2 ?x ?xs)) (map2 ?x (cons ?z0 ?xs)))
(prove (forall ((xs list)(n Nat)(f fun1)) (= (take n (map2 f xs)) (map2 f (take n xs)))))
