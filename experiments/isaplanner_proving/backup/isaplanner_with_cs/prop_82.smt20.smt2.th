(datatype pair () ((pair2 sk sk pair)))
(datatype list2 () ((nil2 list2) (cons2 sk list2 list2)))
(datatype list () ((nil list) (cons pair list list)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun zip (list2 list2) list)
(declare-fun take (Nat list) list)
(declare-fun take2 (Nat list2) list2)
(=> rule0 (zip nil2 ?y) nil)
(=> rule1 (zip (cons2 ?z ?x2) nil2) nil)
(=> rule2 (zip (cons2 ?z ?x2) (cons2 ?x3 ?x4)) (cons (pair2 ?z ?x3) (zip ?x2 ?x4)))
(=> rule3 (cons (pair2 ?z ?x3) (zip ?x2 ?x4)) (zip (cons2 ?z ?x2) (cons2 ?x3 ?x4)))
(=> rule4 (take Z ?y0) nil)
(=> rule5 (take2 Z ?y) nil2)
(=> rule6 (take (S ?z1) nil) nil)
(=> rule7 (take2 (S ?z2) nil2) nil2)
(=> rule8 (take (S ?z3) (cons ?x24 ?x35)) (cons ?x24 (take ?z3 ?x35)))
(=> rule9 (cons ?x24 (take ?z3 ?x35)) (take (S ?z3) (cons ?x24 ?x35)))
(=> rule10 (take2 (S ?z6) (cons2 ?x27 ?x38)) (cons2 ?x27 (take2 ?z6 ?x38)))
(=> rule11 (cons2 ?x27 (take2 ?z6 ?x38)) (take2 (S ?z6) (cons2 ?x27 ?x38)))
(prove (forall ((xs list2)(ys list2)(n Nat)) (= (take n (zip xs ys)) (zip (take2 n xs) (take2 n ys)))))
