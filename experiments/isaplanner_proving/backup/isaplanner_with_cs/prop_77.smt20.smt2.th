(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun <=2 (Nat Nat) Bool)
(declare-fun insort (Nat list) list)
(declare-fun && (Bool Bool) Bool)
(declare-fun sorted (list) Bool)
(<=> rule0 (sorted nil) true)
(=> rule1 (<=2 Z ?y) true)
(=> rule2 (<=2 (S ?z) Z) false)
(=> rule3 (<=2 (S ?z) (S ?x2)) (<=2 ?z ?x2))
(=> rule4 (<=2 ?z ?x2) (<=2 (S ?z) (S ?x2)))
(=> rule5 (insort ?x nil) (cons ?x nil))
(=> rule6 (cons ?x nil) (insort ?x nil))
(=> rule7 (=> (not (<=2 x z)) (= (insort ?x (cons ?z ?xs)) (cons ?z (insort ?x ?xs)))))
(=> rule8 (=> (not (<=2 x z)) (= (insort ?x (cons ?z ?xs)) (cons ?z (insort ?x ?xs)))))
(=> rule9 (=> (<=2 x z) (= (insort ?x (cons ?z ?xs)) (cons ?x (cons ?z ?xs)))))
(=> rule10 (=> (<=2 x z) (= (insort ?x (cons ?z ?xs)) (cons ?x (cons ?z ?xs)))))
(=> rule11 (&& false ?y0) false)
(=> rule12 (&& true ?y1) ?y1)
(=> rule13 (sorted (cons ?y nil)) true)
(=> rule14 (sorted (cons ?y (cons ?y2 ?ys))) (&& (<=2 ?y ?y2) (sorted (cons ?y2 ?ys))))
(=> rule15 (&& (<=2 ?y ?y2) (sorted (cons ?y2 ?ys))) (sorted (cons ?y (cons ?y2 ?ys))))
(prove (forall ((x Nat)(xs list)) (=> (sorted xs) (sorted (insort x xs)))))
