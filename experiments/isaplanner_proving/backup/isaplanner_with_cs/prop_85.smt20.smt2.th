(datatype list2 () ((nil2 list2) (cons2 sk list2 list2)))
(declare-fun zip (list2 list2) list)
(declare-fun len (list2) Nat)
(declare-fun ++ (list2 list2) list2)
(declare-fun rev (list) list)
(declare-fun rev2 (list2) list2)
(=> rule0 (zip nil2 ?y) nil)
(=> rule1 (zip (cons2 ?z ?x2) nil2) nil)
(=> rule2 (zip (cons2 ?z ?x2) (cons2 ?x3 ?x4)) (cons (pair2 ?z ?x3) (zip ?x2 ?x4)))
(=> rule3 (cons (pair2 ?z ?x3) (zip ?x2 ?x4)) (zip (cons2 ?z ?x2) (cons2 ?x3 ?x4)))
(=> rule4 (len nil2) Z)
(=> rule5 Z (len nil2))
(=> rule6 (len (cons2 ?y0 ?xs)) (S (len ?xs)))
(=> rule7 (++ nil2 ?y) ?y)
(=> rule8 (++ (cons2 ?z ?xs) ?y) (cons2 ?z (++ ?xs ?y)))
(=> rule9 (cons2 ?z (++ ?xs ?y)) (++ (cons2 ?z ?xs) ?y))
(=> rule10 (rev nil) nil)
(=> rule11 nil (rev nil))
(=> rule12 (rev2 nil2) nil2)
(=> rule13 nil2 (rev2 nil2))
(=> rule14 (rev2 (cons2 ?y1 ?xs)) (++ (rev2 ?xs) (cons2 ?y1 nil2)))
(=> rule15 (++ (rev2 ?xs) (cons2 ?y1 nil2)) (rev2 (cons2 ?y1 ?xs)))
(prove (forall ((ys list2)(xs list2)) (=> (= (len xs) (len ys)) (= (zip (rev2 xs) (rev2 ys)) (rev (zip xs ys))))))
