(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun == (Nat Nat) Bool)
(declare-fun count (Nat list) Nat)
(declare-fun +2 (Nat Nat) Nat)
(declare-fun ++ (list list) list)
(<=> rule0 (== Z Z) true)
(=> rule1 (== Z (S ?z)) false)
(=> rule2 (== (S ?x2) Z) false)
(=> rule3 (== (S ?x2) (S ?y2)) (== ?x2 ?y2))
(=> rule4 (== ?x2 ?y2) (== (S ?x2) (S ?y2)))
(=> rule5 (count ?x nil) Z)
(=> rule6 (=> (not (== x z)) (= (count ?x (cons ?z ?ys)) (count ?x ?ys))))
(=> rule7 (=> (== x z) (= (count ?x (cons ?z ?ys)) (S (count ?x ?ys)))))
(=> rule8 (+2 Z ?y) ?y)
(=> rule9 (+2 (S ?z) ?y) (S (+2 ?z ?y)))
(=> rule10 (S (+2 ?z ?y)) (+2 (S ?z) ?y))
(=> rule11 (++ nil ?y0) ?y0)
(=> rule12 (++ (cons ?z ?xs) ?y1) (cons ?z (++ ?xs ?y1)))
(=> rule13 (cons ?z (++ ?xs ?y1)) (++ (cons ?z ?xs) ?y1))
(prove (forall ((n Nat)(xs list)(ys list)) (= (+2 (count n xs) (count n ys)) (count n (++ xs ys)))))
