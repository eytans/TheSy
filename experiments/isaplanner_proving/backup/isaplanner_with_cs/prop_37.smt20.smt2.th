(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun == (Nat Nat) Bool)
(declare-fun delete (Nat list) list)
(declare-fun elem (Nat list) Bool)
(<=> rule0 (== Z Z) true)
(=> rule1 (== Z (S ?z)) false)
(=> rule2 (== (S ?x2) Z) false)
(=> rule3 (== (S ?x2) (S ?y2)) (== ?x2 ?y2))
(=> rule4 (== ?x2 ?y2) (== (S ?x2) (S ?y2)))
(=> rule5 (delete ?x nil) nil)
(=> rule6 (=> (not (== x z)) (= (delete ?x (cons ?z ?xs)) (cons ?z (delete ?x ?xs)))))
(=> rule7 (=> (not (== x z)) (= (delete ?x (cons ?z ?xs)) (cons ?z (delete ?x ?xs)))))
(=> rule8 (=> (== x z) (= (delete ?x (cons ?z ?xs)) (delete ?x ?xs))))
(=> rule9 (elem ?x nil) false)
(=> rule10 (=> (not (== x z)) (= (elem ?x (cons ?z ?xs)) (elem ?x ?xs))))
(=> rule11 (=> (== x z) (= (elem ?x (cons ?z ?xs)) true)))
(prove (forall ((x Nat)(xs list)) (= (not (elem x (delete x xs))) true)))
