(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun len (list) Nat)
(declare-fun == (Nat Nat) Bool)
(declare-fun delete (Nat list) list)
(declare-fun <=2 (Nat Nat) Bool)
(<=> rule0 (== Z Z) true)
(=> rule1 (== Z (S ?z)) false)
(=> rule2 (== (S ?x2) Z) false)
(=> rule3 (== (S ?x2) (S ?y2)) (== ?x2 ?y2))
(=> rule4 (== ?x2 ?y2) (== (S ?x2) (S ?y2)))
(=> rule5 (delete ?x nil) nil)
(=> rule6 (=> (not (== x z)) (= (delete ?x (cons ?z ?xs)) (cons ?z (delete ?x ?xs)))))
(=> rule7 (=> (not (== x z)) (= (delete ?x (cons ?z ?xs)) (cons ?z (delete ?x ?xs)))))
(=> rule8 (=> (== x z) (= (delete ?x (cons ?z ?xs)) (delete ?x ?xs))))
(=> rule9 (<=2 Z ?y) true)
(=> rule10 (<=2 (S ?z) Z) false)
(=> rule11 (<=2 (S ?z) (S ?x2)) (<=2 ?z ?x2))
(=> rule12 (<=2 ?z ?x2) (<=2 (S ?z) (S ?x2)))
(=> rule13 (len nil) Z)
(=> rule14 Z (len nil))
(=> rule15 (len (cons ?y ?xs)) (S (len ?xs)))
(prove (forall ((n Nat)(xs list)) (= (<=2 (len (delete n xs)) (len xs)) true)))
