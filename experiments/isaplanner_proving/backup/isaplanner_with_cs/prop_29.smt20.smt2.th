(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun == (Nat Nat) Bool)
(declare-fun elem (Nat list) Bool)
(declare-fun ins1 (Nat list) list)
(<=> rule0 (== Z Z) true)
(=> rule1 (== Z (S ?z)) false)
(=> rule2 (== (S ?x2) Z) false)
(=> rule3 (== (S ?x2) (S ?y2)) (== ?x2 ?y2))
(=> rule4 (== ?x2 ?y2) (== (S ?x2) (S ?y2)))
(=> rule5 (elem ?x nil) false)
(=> rule6 (=> (not (== x z)) (= (elem ?x (cons ?z ?xs)) (elem ?x ?xs))))
(=> rule7 (=> (== x z) (= (elem ?x (cons ?z ?xs)) true)))
(=> rule8 (ins1 ?x nil) (cons ?x nil))
(=> rule9 (cons ?x nil) (ins1 ?x nil))
(=> rule10 (=> (not (== x z)) (= (ins1 ?x (cons ?z ?xs)) (cons ?z (ins1 ?x ?xs)))))
(=> rule11 (=> (not (== x z)) (= (ins1 ?x (cons ?z ?xs)) (cons ?z (ins1 ?x ?xs)))))
(=> rule12 (=> (== x z) (= (ins1 ?x (cons ?z ?xs)) (cons ?z ?xs))))
(prove (forall ((x Nat)(xs list)) (= (elem x (ins1 x xs)) true)))
