(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun drop (Nat Lst) Lst)
(declare-fun take (Nat Lst) Lst)
(=> rule0 (append nil ?x) ?x)
(=> rule1 (append (cons ?x50 ?y) ?z) (cons ?x50 (append ?y ?z)))
(=> rule2 (cons ?x50 (append ?y ?z)) (append (cons ?x50 ?y) ?z))
(=> rule3 (drop ?x51 nil) nil)
(=> rule4 (drop zero ?x) ?x)
(=> rule5 (drop (succ ?x52) (cons ?y53 ?z)) (drop ?x52 ?z))
(=> rule6 (take ?x54 nil) nil)
(=> rule7 (take zero ?x) nil)
(=> rule8 (take (succ ?x55) (cons ?y56 ?z)) (cons ?y56 (take ?x55 ?z)))
(=> rule9 (cons ?y56 (take ?x55 ?z)) (take (succ ?x55) (cons ?y56 ?z)))

(declare-fun filter ((-> Nat bool) Lst) Lst)
(=> filter_base (filter ?p nil) nil)
(=> filter_ind (filter ?p (cons ?x ?xs)) (ite (apply ?p ?x) (cons ?x (filter ?p ?xs)) (filter ?p ?xs)))
