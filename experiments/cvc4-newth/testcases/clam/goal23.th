datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun half (x_0 : Nat) -> Nat
fun append (x_0 : Lst) (x_1 : Lst) -> Lst
fun len (x_0 : Lst) -> Nat
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (half zero) => zero
rw rule1 zero => (half zero)
rw rule2 (half (succ zero)) => zero
rw rule3 zero => (half (succ zero))
rw rule4 (half (succ (succ ?n))) => (succ (half ?n))
rw rule5 (succ (half ?n)) => (half (succ (succ ?n)))
rw rule6 (append nil ?x) => ?x
rw rule7 (append (cons ?x2 ?y) ?z) => (cons ?x2 (append ?y ?z))
rw rule8 (cons ?x2 (append ?y ?z)) => (append (cons ?x2 ?y) ?z)
rw rule9 (len nil) => zero
rw rule10 zero => (len nil)
rw rule11 (len (cons ?x3 ?y)) => (succ (len ?y))
prove (half (len (append (?x : Lst) (?y : Lst))))  = (half (len (append (?y : Lst) (?x : Lst))))
