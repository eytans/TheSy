datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
fun plus (x_0 : Nat) (x_1 : Nat) -> Nat
fun mult (x_0 : Nat) (x_1 : Nat) -> Nat
fun exp (x_0 : Nat) (x_1 : Nat) -> Nat
fun qexp (x_0 : Nat) (x_1 : Nat) (x_2 : Nat) -> Nat
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (plus zero ?n) => ?n
rw rule1 (plus (succ ?n) ?m) => (succ (plus ?n ?m))
rw rule2 (succ (plus ?n ?m)) => (plus (succ ?n) ?m)
rw rule3 (mult zero ?n) => zero
rw rule4 (mult (succ ?n) ?m) => (plus (mult ?n ?m) ?m)
rw rule5 (plus (mult ?n ?m) ?m) => (mult (succ ?n) ?m)
rw rule6 (exp ?n zero) => (succ zero)
rw rule7 (exp ?n (succ ?m)) => (mult (exp ?n ?m) ?n)
rw rule8 (mult (exp ?n ?m) ?n) => (exp ?n (succ ?m))
rw rule9 (qexp ?n zero ?m) => ?m
rw rule10 (qexp ?n (succ ?m) ?p) => (qexp ?n ?m (mult ?p ?n))
rw rule11 (qexp ?n ?m (mult ?p ?n)) => (qexp ?n (succ ?m) ?p)
rw rule12 (mult (exp ?x ?y) ?z) => (qexp ?x ?y ?z)
rw rule13 (qexp ?x ?y ?z) => (mult (exp ?x ?y) ?z)
prove (exp (?x : Nat) (?y : Nat))  = (qexp (?x : Nat) (?y : Nat) (succ zero))
