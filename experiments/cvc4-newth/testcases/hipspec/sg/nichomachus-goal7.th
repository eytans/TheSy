datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
fun plus (x_0 : Nat) (x_1 : Nat) -> Nat
fun mult (x_0 : Nat) (x_1 : Nat) -> Nat
fun tri (x_0 : Nat) -> Nat
fun cubes (x_0 : Nat) -> Nat
rw rule0 (plus zero ?n) => ?n
rw rule1 (plus (succ ?n) ?m) => (succ (plus ?n ?m))
rw rule2 (succ (plus ?n ?m)) => (plus (succ ?n) ?m)
rw rule3 (mult zero ?n) => zero
rw rule4 (mult (succ ?n) ?m) => (plus (mult ?n ?m) ?m)
rw rule5 (plus (mult ?n ?m) ?m) => (mult (succ ?n) ?m)
rw rule6 (tri zero) => zero
rw rule7 zero => (tri zero)
rw rule8 (tri (succ ?n)) => (plus (tri ?n) (succ ?n))
rw rule9 (plus (tri ?n) (succ ?n)) => (tri (succ ?n))
rw rule10 (cubes zero) => zero
rw rule11 zero => (cubes zero)
rw rule12 (cubes (succ ?n)) => (plus (cubes ?n) (mult (succ ?n) (mult (succ ?n) (succ ?n))))
rw rule13 (plus (cubes ?n) (mult (succ ?n) (mult (succ ?n) (succ ?n)))) => (cubes (succ ?n))
rw rule14 (plus ?n ?m) => (plus ?m ?n)
rw rule15 (plus ?m ?n) => (plus ?n ?m)
rw rule16 (plus ?x (plus ?y ?z)) => (plus (plus ?y ?x) ?z)
rw rule17 (plus (plus ?y ?x) ?z) => (plus ?x (plus ?y ?z))
rw rule18 (mult ?n ?m) => (mult ?m ?n)
rw rule19 (mult ?m ?n) => (mult ?n ?m)
rw rule20 (mult ?x (mult ?y ?z)) => (mult (mult ?y ?x) ?z)
rw rule21 (mult (mult ?y ?x) ?z) => (mult ?x (mult ?y ?z))
rw rule22 (plus (mult ?x ?y) (mult ?x ?z)) => (mult ?x (plus ?y ?z))
rw rule23 (mult ?x (plus ?y ?z)) => (plus (mult ?x ?y) (mult ?x ?z))
prove (mult (tri (?x : Nat)) (plus (?y : Nat) (?y : Nat)))  = (mult (?x : Nat) (mult (?y : Nat) (succ (?x : Nat))))
