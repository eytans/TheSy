datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun len (x_0 : Lst) -> Nat
fun append (x_0 : Lst) (x_1 : Lst) -> Lst
fun rotate (x_0 : Nat) (x_1 : Lst) -> Lst
fun plus (x_0 : Nat) (x_1 : Nat) -> Nat
rw rule0 (len nil) => zero
rw rule1 zero => (len nil)
rw rule2 (len (cons ?x ?y)) => (succ (len ?y))
rw rule3 (append nil ?x0) => ?x0
rw rule4 (append (cons ?x ?y) ?z) => (cons ?x (append ?y ?z))
rw rule5 (cons ?x (append ?y ?z)) => (append (cons ?x ?y) ?z)
rw rule6 (rotate zero ?x1) => ?x1
rw rule7 (rotate (succ ?n) nil) => nil
rw rule8 (rotate (succ ?n) (cons ?y2 ?x3)) => (rotate ?n (append ?x3 (cons ?y2 nil)))
rw rule9 (rotate ?n (append ?x3 (cons ?y2 nil))) => (rotate (succ ?n) (cons ?y2 ?x3))
rw rule10 (plus zero ?n) => ?n
rw rule11 (plus (succ ?n) ?m) => (succ (plus ?n ?m))
rw rule12 (succ (plus ?n ?m)) => (plus (succ ?n) ?m)
rw rule13 (append ?x4 nil) => ?x4
rw rule14 (append (append ?x5 ?y) ?z) => (append ?x5 (append ?y ?z))
rw rule15 (append ?x5 (append ?y ?z)) => (append (append ?x5 ?y) ?z)
prove (rotate (len (?x6 : Lst)) (append (?x6 : Lst) (?y : Lst)))  = (append (?y : Lst) (?x6 : Lst))
