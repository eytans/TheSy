datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun plus (x_0 : Nat) (x_1 : Nat) -> Nat
fun append (x_0 : Lst) (x_1 : Lst) -> Lst
fun len (x_0 : Lst) -> Nat
fun rev (x_0 : Lst) -> Lst
fun qreva (x_0 : Lst) (x_1 : Lst) -> Lst
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (plus zero ?n) => ?n
rw rule1 (plus (succ ?n) ?m) => (succ (plus ?n ?m))
rw rule2 (succ (plus ?n ?m)) => (plus (succ ?n) ?m)
rw rule3 (append nil ?x) => ?x
rw rule4 (append (cons ?x2 ?y) ?z) => (cons ?x2 (append ?y ?z))
rw rule5 (cons ?x2 (append ?y ?z)) => (append (cons ?x2 ?y) ?z)
rw rule6 (len nil) => zero
rw rule7 zero => (len nil)
rw rule8 (len (cons ?x3 ?y)) => (succ (len ?y))
rw rule9 (rev nil) => nil
rw rule10 nil => (rev nil)
rw rule11 (rev (cons ?x4 ?y)) => (append (rev ?y) (cons ?x4 nil))
rw rule12 (append (rev ?y) (cons ?x4 nil)) => (rev (cons ?x4 ?y))
rw rule13 (qreva nil ?x) => ?x
rw rule14 (qreva (cons ?z5 ?x) ?y) => (qreva ?x (cons ?z5 ?y))
rw rule15 (qreva ?x (cons ?z5 ?y)) => (qreva (cons ?z5 ?x) ?y)
prove (len (qreva ?x ?y))  = (plus (len ?x) (len ?y))
