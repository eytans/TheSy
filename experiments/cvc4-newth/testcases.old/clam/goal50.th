datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun less (x_0 : Nat) (x_1 : Nat) -> Bool
fun count (x_0 : Nat) (x_1 : Lst) -> Nat
fun insort (x_0 : Nat) (x_1 : Lst) -> Lst
fun sort (x_0 : Lst) -> Lst
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (less ?x zero) => false
rw rule1 (less zero (succ ?x)) => true
rw rule2 (less (succ ?x) (succ ?y)) => (less ?x ?y)
rw rule3 (less ?x ?y) => (less (succ ?x) (succ ?y))
rw rule4 (count ?x nil) => zero
rw rule5 (count ?x (cons ?y ?z)) => (ite (= ?x ?y) (succ (count ?x ?z)) (count ?x ?z))
rw rule6 (ite (= ?x ?y) (succ (count ?x ?z)) (count ?x ?z)) => (count ?x (cons ?y ?z))
rw rule7 (insort ?i nil) => (cons ?i nil)
rw rule8 (cons ?i nil) => (insort ?i nil)
rw rule9 (insort ?i (cons ?x ?y2)) => (ite (less ?i ?x) (cons ?i (cons ?x ?y2)) (cons ?x (insort ?i ?y2)))
rw rule10 (ite (less ?i ?x) (cons ?i (cons ?x ?y2)) (cons ?x (insort ?i ?y2))) => (insort ?i (cons ?x ?y2))
rw rule11 (sort nil) => nil
rw rule12 nil => (sort nil)
rw rule13 (sort (cons ?x ?y3)) => (insort ?x (sort ?y3))
rw rule14 (insort ?x (sort ?y3)) => (sort (cons ?x ?y3))
prove (count ?x (sort ?y4))  = (count ?x ?y4)
