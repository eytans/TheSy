datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun plus (x_0 : Nat) (x_1 : Nat) -> Nat
fun count (x_0 : Nat) (x_1 : Lst) -> Nat
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (plus zero ?n) => ?n
rw rule1 (plus (succ ?n) ?m) => (succ (plus ?n ?m))
rw rule2 (succ (plus ?n ?m)) => (plus (succ ?n) ?m)
rw rule3 (count ?x nil) => zero
rw rule4 (count ?x (cons ?y ?z)) => (ite (= ?x ?y) (succ (count ?x ?z)) (count ?x ?z))
rw rule5 (ite (= ?x ?y) (succ (count ?x ?z)) (count ?x ?z)) => (count ?x (cons ?y ?z))
prove (plus (succ zero) (count ?n ?l))  = (count ?n (cons ?n ?l))
