datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun append (x_0 : Lst) (x_1 : Lst) -> Lst
fun drop (x_0 : Nat) (x_1 : Lst) -> Lst
fun take (x_0 : Nat) (x_1 : Lst) -> Lst
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (append nil ?x) => ?x
rw rule1 (append (cons ?x2 ?y) ?z) => (cons ?x2 (append ?y ?z))
rw rule2 (cons ?x2 (append ?y ?z)) => (append (cons ?x2 ?y) ?z)
rw rule3 (drop ?x3 nil) => nil
rw rule4 (drop zero ?x) => ?x
rw rule5 (drop (succ ?x4) (cons ?y5 ?z)) => (drop ?x4 ?z)
rw rule6 (take ?x6 nil) => nil
rw rule7 (take zero ?x) => nil
rw rule8 (take (succ ?x7) (cons ?y8 ?z)) => (cons ?y8 (take ?x7 ?z))
rw rule9 (cons ?y8 (take ?x7 ?z)) => (take (succ ?x7) (cons ?y8 ?z))
prove (append (take ?n ?xs) (drop ?n ?xs))  = ?xs
