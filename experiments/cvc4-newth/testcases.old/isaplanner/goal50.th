datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun minus (x_0 : Nat) (x_1 : Nat) -> Nat
fun len (x_0 : Lst) -> Nat
fun take (x_0 : Nat) (x_1 : Lst) -> Lst
fun last (x_0 : Lst) -> Nat
fun butlast (x_0 : Lst) -> Lst
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (minus zero ?n) => zero
rw rule1 (minus ?n zero) => ?n
rw rule2 (minus (succ ?n) (succ ?m)) => (minus ?n ?m)
rw rule3 (minus ?n ?m) => (minus (succ ?n) (succ ?m))
rw rule4 (len nil) => zero
rw rule5 zero => (len nil)
rw rule6 (len (cons ?x ?y)) => (succ (len ?y))
rw rule7 (take ?x nil) => nil
rw rule8 (take zero ?x2) => nil
rw rule9 (take (succ ?x) (cons ?y3 ?z)) => (cons ?y3 (take ?x ?z))
rw rule10 (cons ?y3 (take ?x ?z)) => (take (succ ?x) (cons ?y3 ?z))
rw rule11 (last (cons ?x ?y)) => (ite (= ?y nil) ?x (last ?y))
rw rule12 (ite (= ?y nil) ?x (last ?y)) => (last (cons ?x ?y))
rw rule13 (butlast nil) => nil
rw rule14 nil => (butlast nil)
rw rule15 (butlast (cons ?x ?y)) => (ite (= ?y nil) nil (cons ?x (butlast ?y)))
rw rule16 (ite (= ?y nil) nil (cons ?x (butlast ?y))) => (butlast (cons ?x ?y))
prove (butlast ?xs)  = (take (minus (len ?xs) (succ zero)) ?xs)
