datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun append (x_0 : Lst) (x_1 : Lst) -> Lst
fun last (x_0 : Lst) -> Nat
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (append nil ?x) => ?x
rw rule1 (append (cons ?x2 ?y) ?z) => (cons ?x2 (append ?y ?z))
rw rule2 (cons ?x2 (append ?y ?z)) => (append (cons ?x2 ?y) ?z)
rw rule3 (last (cons ?x3 ?y)) => (ite (= ?y nil) ?x3 (last ?y))
rw rule4 (ite (= ?y nil) ?x3 (last ?y)) => (last (cons ?x3 ?y))
prove (last (append ?xs ?ys))  = (ite (= ?ys nil) (last ?xs) (last ?ys))
