datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun P (x_0 : Nat) -> Bool
fun drop (x_0 : Nat) (x_1 : Lst) -> Lst
fun dropWhile (x_0 : Lst) -> Lst
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (drop ?x nil) => nil
rw rule1 (drop zero ?x2) => ?x2
rw rule2 (drop (succ ?x) (cons ?y ?z)) => (drop ?x ?z)
rw rule3 (dropWhile nil) => nil
rw rule4 nil => (dropWhile nil)
rw rule5 (dropWhile (cons ?x ?y3)) => (ite (P ?x) (dropWhile ?y3) (cons ?x ?y3))
rw rule6 (ite (P ?x) (dropWhile ?y3) (cons ?x ?y3)) => (dropWhile (cons ?x ?y3))
prove if (forall ((x Nat)) (not (P x))) then (dropWhile ?xs)  = ?xs
