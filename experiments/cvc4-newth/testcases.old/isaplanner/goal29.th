datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
fun mem (x_0 : Nat) (x_1 : Lst) -> Bool
fun ins1 (x_0 : Nat) (x_1 : Lst) -> Lst
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule0 (mem ?x nil) => false
rw rule1 (mem ?x (cons ?y ?z)) => (or (= ?x ?y) (mem ?x ?z))
rw rule2 (or (= ?x ?y) (mem ?x ?z)) => (mem ?x (cons ?y ?z))
rw rule3 (ins1 ?i nil) => (cons ?i nil)
rw rule4 (cons ?i nil) => (ins1 ?i nil)
rw rule5 (ins1 ?i (cons ?x ?y2)) => (ite (= ?i ?x) (cons ?x ?y2) (cons ?x (ins1 ?i ?y2)))
rw rule6 (ite (= ?i ?x) (cons ?x ?y2) (cons ?x (ins1 ?i ?y2))) => (ins1 ?i (cons ?x ?y2))
prove (mem ?x (ins1 ?x ?l)) 
