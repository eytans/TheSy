datatype Nat () := (succ : (x_0 : Nat) -> (res : Nat)) (zero : (res : Nat))
datatype Lst () := (cons : (x_0 : Nat) -> (x_1 : Lst) -> (res : Lst)) (nil : (res : Lst))
datatype Tree () := (node : (x_0 : Nat) -> (x_1 : Tree) -> (x_2 : Tree) -> (res : Tree)) (leaf : (res : Tree))
fun less (x_0 : Nat) (x_1 : Nat) -> Bool
fun plus (x_0 : Nat) (x_1 : Nat) -> Nat
fun nmax (x_0 : Nat) (x_1 : Nat) -> Nat
fun append (x_0 : Lst) (x_1 : Lst) -> Lst
fun len (x_0 : Lst) -> Nat
fun mem (x_0 : Nat) (x_1 : Lst) -> Bool
fun tinsert (x_0 : Tree) (x_1 : Nat) -> Tree
fun height (x_0 : Tree) -> Nat
fun tinsert-all (x_0 : Tree) (x_1 : Lst) -> Tree
fun tsize (x_0 : Tree) -> Nat
fun tremove (x_0 : Tree) (x_1 : Nat) -> Tree
fun tremove-all (x_0 : Tree) (x_1 : Lst) -> Tree
fun tcontains (x_0 : Tree) (x_1 : Nat) -> Bool
fun tsorted (x_0 : Tree) -> Bool
fun tmember (x_0 : Tree) (x_1 : Nat) -> Bool
fun content (x_0 : Tree) -> Lst
rw rule0 (less zero zero) <=> false
rw rule1 (less zero (succ ?x)) => true
rw rule2 (less (succ ?x) (succ ?y)) => (less ?x ?y)
rw rule3 (less ?x ?y) => (less (succ ?x) (succ ?y))
fun leq (__x0 : Nat) (__y1 : Nat) -> Bool => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
rw rule4 (plus zero ?n) => ?n
rw rule5 (plus (succ ?n) ?m) => (succ (plus ?n ?m))
rw rule6 (succ (plus ?n ?m)) => (plus (succ ?n) ?m)
rw rule7 (nmax ?n ?m) => (ite (less ?n ?m) ?m ?n)
rw rule8 (ite (less ?n ?m) ?m ?n) => (nmax ?n ?m)
rw rule9 (append nil ?x2) => ?x2
rw rule10 (append (cons ?x ?y3) ?z) => (cons ?x (append ?y3 ?z))
rw rule11 (cons ?x (append ?y3 ?z)) => (append (cons ?x ?y3) ?z)
rw rule12 (len nil) => zero
rw rule13 zero => (len nil)
rw rule14 (len (cons ?x ?y4)) => (succ (len ?y4))
rw rule15 (mem ?x nil) => false
rw rule16 (mem ?x (cons ?y ?z)) => (or (= ?x ?y) (mem ?x ?z))
rw rule17 (or (= ?x ?y) (mem ?x ?z)) => (mem ?x (cons ?y ?z))
rw rule18 (tinsert leaf ?i) => (node ?i leaf leaf)
rw rule19 (node ?i leaf leaf) => (tinsert leaf ?i)
rw rule20 (tinsert (node ?d ?l ?r) ?i) => (ite (less ?d ?i) (node ?d ?l (tinsert ?r ?i)) (node ?d (tinsert ?l ?i) ?r))
rw rule21 (ite (less ?d ?i) (node ?d ?l (tinsert ?r ?i)) (node ?d (tinsert ?l ?i) ?r)) => (tinsert (node ?d ?l ?r) ?i)
rw rule22 (height leaf) => zero
rw rule23 zero => (height leaf)
rw rule24 (height (node ?x ?y5 ?z6)) => (succ (nmax (height ?y5) (height ?z6)))
rw rule25 (tinsert-all ?x7 nil) => ?x7
rw rule26 (tinsert-all ?x8 (cons ?n ?l9)) => (tinsert (tinsert-all ?x8 ?l9) ?n)
rw rule27 (tinsert (tinsert-all ?x8 ?l9) ?n) => (tinsert-all ?x8 (cons ?n ?l9))
rw rule28 (tsize leaf) => zero
rw rule29 zero => (tsize leaf)
rw rule30 (tsize (node ?x ?l ?r)) => (succ (plus (tsize ?l) (tsize ?r)))
rw rule31 (tremove leaf ?i) => leaf
rw rule32 if less(i, d) then (tremove (node ?d ?l ?r) ?i) => (node ?d (tremove ?l ?i) ?r)
rw rule33 if less(i, d) then (node ?d (tremove ?l ?i) ?r) => (tremove (node ?d ?l ?r) ?i)
rw rule34 if less(d, i) then (tremove (node ?d ?l ?r) ?i) => (node ?d ?l (tremove ?r ?i))
rw rule35 if less(d, i) then (node ?d ?l (tremove ?r ?i)) => (tremove (node ?d ?l ?r) ?i)
rw rule36 (tremove (node ?d leaf ?r) ?d) => ?r
rw rule37 (tremove (node ?d (node ?ld ?ll ?lr) ?r) ?d) => (node ?ld (tremove (node ?ld ?ll ?lr) ?ld) ?r)
rw rule38 (tremove-all ?x10 nil) => ?x10
rw rule39 (tremove-all ?x11 (cons ?n ?l12)) => (tremove-all (tremove ?x11 ?n) ?l12)
rw rule40 (tremove-all (tremove ?x11 ?n) ?l12) => (tremove-all ?x11 (cons ?n ?l12))
rw rule41 (tcontains leaf ?i) => false
rw rule42 (tcontains (node ?d ?l ?r) ?i) => (or (= ?d ?i) (tcontains ?l ?i) (tcontains ?r ?i))
rw rule43 (or (= ?d ?i) (tcontains ?l ?i) (tcontains ?r ?i)) => (tcontains (node ?d ?l ?r) ?i)
rw rule44 (tsorted leaf) <=> true
rw rule45 (tsorted (node ?d ?l ?r)) => (and (tsorted ?l) (tsorted ?r) (forall ((x Nat)) (=> (tcontains ?l x) (or (= x ?d) (less x ?d)))) (forall ((x Nat)) (=> (tcontains ?r x) (less ?d x))))
rw rule46 (and (tsorted ?l) (tsorted ?r) (forall ((x Nat)) (=> (tcontains ?l x) (or (= x ?d) (less x ?d)))) (forall ((x Nat)) (=> (tcontains ?r x) (less ?d x)))) => (tsorted (node ?d ?l ?r))
rw rule47 (tmember leaf ?x) => false
rw rule48 (tmember (node ?d ?l ?r) ?i) => (ite (= ?i ?d) true (tmember (ite (less ?d ?i) ?r ?l) ?i))
rw rule49 (ite (= ?i ?d) true (tmember (ite (less ?d ?i) ?r ?l) ?i)) => (tmember (node ?d ?l ?r) ?i)
rw rule50 (content leaf) => nil
rw rule51 nil => (content leaf)
rw rule52 (content (node ?d ?l ?r)) => (append (content ?l) (cons ?d (content ?r)))
rw rule53 (append (content ?l) (cons ?d (content ?r))) => (content (node ?d ?l ?r))
rw rule54 (tsize (tinsert ?t ?n)) => (succ (tsize ?t))
prove (or (= (tsize (?t : Tree)) (tsize (tinsert-all (?t : Tree) (?l13 : Lst)))) (less (tsize (?t : Tree)) (tsize (tinsert-all (?t : Tree) (?l13 : Lst))))) 
